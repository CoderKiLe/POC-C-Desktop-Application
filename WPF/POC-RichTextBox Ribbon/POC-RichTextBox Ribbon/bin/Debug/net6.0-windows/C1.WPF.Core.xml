<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.WPF.Core</name>
    </assembly>
    <members>
        <member name="T:C1.WPF.Core.C1DataTemplateSelector">
            <summary>
            Provides a way to apply data templates based on custom logic.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DataTemplateSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ProgressBar">
            <summary>
            Visual element which indicates the progress of an operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBar.TemplateSettings">
            <summary>
            Gets the settings that can be bound in the template of the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar._isIndeterminate">
            <summary>
            Gets or sets a value indicating whether the control is in the indeterminate state.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar._indeterminateForeground">
            <summary>
            Gets or sets a brush used to highlight the dots when the bar is in indeterminate state.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar._cornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBar.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ProgressBar.IsIndeterminate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether the control is in the indeterminate state.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar.IndeterminateForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ProgressBar.IndeterminateForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBar.IndeterminateForeground">
            <summary>
            Gets or sets a brush used to highlight the dots when the bar is in indeterminate state.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ProgressBar.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ProgressBar.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBar.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ProgressBar.ChangeVisualStateIndeterminate(System.Boolean)">
            <summary>
            Updates the current visual state of the Indeterminate visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ProgressBarTemplateSettings">
            <summary>
            Settings of <see cref="T:C1.WPF.Core.C1ProgressBar"/> to be used in the control template.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.IndicatorWidth">
            <summary>
            Gets the width of the indicator.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.EllipseDiameter">
            <summary>
            Gets the template-defined diameter of the Ellipse element that is animated in a templated <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.EllipseOffset">
            <summary>
            Gets the template-defined offset position of the Ellipse element that is animated in a templated <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.ContainerAnimationStartPosition">
            <summary>
            Gets the From point of the container animation that animates the <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.ContainerAnimationEndPosition">
            <summary>
            Gets the target To point of the container animation that animates the <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.EllipseAnimationWellPosition">
            <summary>
            Gets the stopped point of the Ellipse animation that animates the <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.EllipseAnimationEndPosition">
            <summary>
            Gets the To point of the Ellipse animation that animates the <see cref="T:C1.WPF.Core.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ProgressBarTemplateSettings.IndicatorLengthDelta">
            <summary>
            Gets the indicator length delta, which is useful for repositioning transitions.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ProgressBarTemplateSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1RadioButton">
            <summary>
            Represents a button that can be selected, but not cleared, by a user.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1RadioButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RadioButton.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1RadioButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RadioButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1RadioButton.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RadioButton.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1RadioButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.C1HslColor">
            <summary>
            Class that allows to increase/decrease lightness
            of the specified color.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HslColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HslColor"/> struct.
            </summary>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.WPF.Core.C1HslColor.#ctor(System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HslColor"/> struct.
            </summary>
            <param name="a">Alpha channel.</param>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.WPF.Core.C1HslColor.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HslColor"/> struct.
            </summary>
            <param name="rgbColor">RGB color used to initialize the HSL color.</param>
        </member>
        <member name="P:C1.WPF.Core.C1HslColor.Hue">
            <summary>
            Gets or sets the hue of the color.
            </summary>
            <remarks>
            Hue is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1HslColor.Saturation">
            <summary>
            Gets or sets the saturation of the color.
            </summary>
            <remarks>
            Saturation is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1HslColor.Luminance">
            <summary>
            Gets or sets the luminance of the color.
            </summary>
            <remarks>
            Luminance is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1HslColor.Alpha">
            <summary>
            Gets or sets the alpha channel of the color.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HslColor.ToColor(System.Single,System.Single,System.Single)">
            <summary>
            REturns a color from its HSL representation.
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="l">Luminosity</param>
        </member>
        <member name="T:C1.WPF.Core.C1ProjectThicknessConverter">
            <summary>
            Converter used to extract a specific member of a thickness structure.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1SideRadiusConverter">
            <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ColorConverter">
            <summary>
            Converts between Colors and Brushes.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.FontFamilyConverter">
            <summary>
            Represents <see cref="T:System.Windows.Media.FontFamily"/> converter.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.FontFamilyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.FontFamilyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.ZoomToScaleTransformConverter">
            <summary>
            Converts a double value to a <see cref="T:System.Windows.Media.ScaleTransform"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DockEx.GetOrientation(System.Windows.Controls.Dock)">
            <summary>
            Gets the orientation.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.DockEx.GetOpposite(System.Windows.Controls.Dock)">
            <summary>
            Gets the opposite.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.IReadOnlyListEx">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.UIElementEx.C1TransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement"/> to the specified object.
            </summary>
            <remarks>
            This is an improved version of <see cref="T:System.Windows.UIElement"/>.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:System.Windows.Controls.Primitives.Popup"/>s.
            </remarks>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> that defines the source coordinates.</param>
            <param name="visual">The <see cref="T:System.Windows.UIElement"/> that defines the target coordinates.</param>
            <returns>A transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement"/> to the specified object.</returns>
        </member>
        <member name="M:C1.WPF.Core.UIElementEx.C1GetRootVisual(System.Windows.UIElement)">
            <summary>
            [Platform safe] Gets the visual root of the current Application.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.ISpellChecker">
            <summary>
            Provides spell checking services.
            </summary>
            <remarks>
            This interface is implemented by C1SpellChecker in the C1.Silverlight.SpellChecker assembly.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.ISpellChecker.CheckText(System.String)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <returns>List of <see cref="T:C1.WPF.Core.ICharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.WPF.Core.ISpellChecker.GetSuggestions(System.String,System.Int32)">
            <summary>
            Gets a list of suggestions for a misspelled word.
            </summary>
            <param name="word">Word to suggest alternatives for.</param>
            <param name="maxSuggestions">Maximum number of suggestions to provide.</param>
            <returns>A list of suggestions for the <paramref name="word"/> parameter.</returns>
        </member>
        <member name="M:C1.WPF.Core.ISpellChecker.ShowSuggestionsMenu(System.Object,System.Windows.Point,System.String,System.Action{System.String})">
            <summary>
            Shows a context menu with suggestions for a misspelled word.
            </summary>
            <param name="editor">The editor control whose content is being spell checked.</param>
            <param name="position">The position in absolute plug-in coordinates where the menu should be open.</param>
            <param name="word">The misspelled word.</param>
            <param name="correctCallback">Callback called when a suggested correction is chosen.</param>
        </member>
        <member name="M:C1.WPF.Core.ISpellChecker.CheckControlAsync(System.Object)">
            <summary>
            Shows a spell-checking dialog for an editor control.
            </summary>
            <param name="editor">Object that contains the text to be spell-checked.</param>
        </member>
        <member name="P:C1.WPF.Core.ISpellChecker.IgnoreList">
            <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ISpellChecker.UserDictionary">
            <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ISpellChecker.Enabled">
            <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.ISpellChecker.DictionaryChanged">
            <summary>
            Event that fires when any of the spell dictionaries changes in any way.
            </summary>
            <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It fires for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
        </member>
        <member name="T:C1.WPF.Core.ICharRange">
            <summary>
            Represents a character range within a string.
            This is used by <see cref="T:C1.WPF.Core.ISpellChecker"/> to represent the
            spelling mistakes found in text.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ICharRange.Start">
            <summary>
            Gets the index of the start of the range.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ICharRange.Length">
            <summary>
            Gets the length of the range.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.BreakLine">
            <summary>
            Specifies hard line breaks before and/or after elements in a <see cref="T:C1.WPF.C1WrapPanel" />..
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BreakLine.None">
            <summary>
            No hard breaks. The next element will be positioned in the same line if there is enough room.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BreakLine.After">
            <summary>
            Add a hard break after this element. The next element will be positioned in the next line.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BreakLine.Before">
            <summary>
            Add a hard break before this element.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BreakLine.AfterAndBefore">
            <summary>
            Add hard breaks before and after this element. It will be positioned by itself on a line.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DockPanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally or vertically, relative to each other.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DockPanel._lastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child of the panel fills the remaining space.
            </summary>
            <remarks>If this property is set to True, then the Dock property of the last child element will be ignored, and the panel will try to fill the empty space.</remarks>
        </member>
        <member name="F:C1.WPF.Core.C1DockPanel._dock">
            <summary>
            Gets or sets a value that indicates the position of a child element within a parent <see cref="T:C1.WPF.Core.C1DockPanel" />.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1DockPanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1DockPanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1DockPanel.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.GetDock(System.Windows.DependencyObject)">
            <summary> 
            Gets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the Dock property.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1DockPanel.SetDock(System.Windows.DependencyObject,System.Windows.Controls.Dock)">
            <summary> 
            Sets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.WPF.Core.C1DockPanel.DockProperty">
            <summary> 
            Identifies the Dock attached property. 
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DockPanel.LastChildFillProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1DockPanel.LastChildFill"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child of the panel fills the remaining space.
            </summary>
            <remarks>If this property is set to True, then the Dock property of the last child element will be ignored, and the panel will try to fill the empty space.</remarks>
        </member>
        <member name="T:C1.WPF.Core.C1LinePanel">
            <summary>
            C1LinePanel arranges a list of items in a single row or column.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel._orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel._reverse">
            <summary>
            Gets or sets whether the items are arranged top-down/left-right or bottom-up/right-left.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel._spacing">
            <summary>
            Gets or sets the space between items.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LinePanel.LineDefinitions">
            <summary>
            Gets the collection of specifications of how much space to give to each item.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1LinePanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1LinePanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1LinePanel.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1LinePanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LinePanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel.ReverseProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1LinePanel.Reverse"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LinePanel.Reverse">
            <summary>
            Gets or sets whether the items are arranged top-down/left-right or bottom-up/right-left.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LinePanel.SpacingProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1LinePanel.Spacing"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LinePanel.Spacing">
            <summary>
            Gets or sets the space between items.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.BaseMeasureInternal(System.Windows.Size,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.BaseArrangeInternal(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.MeasureInternal(System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Called to get the desired-size of this view for the specified <paramref name="availableSize"/>.
            </summary>
            <param name="availableSize">The available size to measure this view. This size can have infinite width or height.</param>
            <param name="exactWidth"></param>
            <param name="exactHeight"></param>
            <returns>The returned size must be finite.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LinePanel.ArrangeInternal(System.Windows.Size)">
            <summary>
            When called it determines the children views to their final positions.
            </summary>
            <param name="finalSize">The size the layout assigns to this view.</param>
            <returns>The final position it takes up.</returns>
        </member>
        <member name="T:C1.WPF.Core.LineDefinition">
            <summary>
            Defines row or column specific properties that apply to <see cref="T:C1.WPF.Core.C1LinePanel"/> elements.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.LineDefinition.Length">
            <summary>
            Gets or sets a value that represents the height or width of the <see cref="T:C1.WPF.Core.LineDefinition"/>.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1WrapPanel">
            <summary>
            Positions child elements sequentially from top to bottom or from right to left, depending on the value of the <see cref="P:C1.WPF.Core.C1WrapPanel.Orientation" /> property.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel._orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel._itemWidth">
            <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel._itemHeight">
            <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel._breakLine">
            <summary>
            Gets or sets a value that indicates whether to include hard line breaks before and/or after an element within the panel.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1WrapPanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1WrapPanel"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1WrapPanel.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.GetBreakLine(System.Windows.DependencyObject)">
            <summary> 
            Gets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the BreakLine property.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1WrapPanel.SetBreakLine(System.Windows.DependencyObject,C1.WPF.Core.BreakLine)">
            <summary> 
            Sets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel.BreakLineProperty">
            <summary> 
            Identifies the BreakLine attached property. 
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1WrapPanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1WrapPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1WrapPanel.ItemWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1WrapPanel.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1WrapPanel.ItemHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1WrapPanel.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.UVSize">
            <summary>
            Represents a size that is independent from the orientation.
            </summary>
            <remarks>This class is useful for layout's supporting orientation</remarks>
        </member>
        <member name="M:C1.WPF.Core.UVSize.#ctor(System.Windows.Controls.Orientation)">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Core.UVSize"/>.
            </summary>
            <param name="orientation">The orientation of the size.</param>
        </member>
        <member name="M:C1.WPF.Core.UVSize.#ctor(System.Windows.Controls.Orientation,System.Windows.Size)">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Core.UVSize"/>.
            </summary>
            <param name="orientation">The orientation of the size.</param>
            <param name="size">The original size in UI coordinates.</param>
        </member>
        <member name="M:C1.WPF.Core.UVSize.#ctor(System.Windows.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Core.UVSize"/>.
            </summary>
            <param name="orientation">The orientation of the size.</param>
            <param name="width">The width of the size in UI coordinates.</param>
            <param name="height">The height of the size in UI coordinates.</param>
        </member>
        <member name="P:C1.WPF.Core.UVSize.Orientation">
            <summary>
            Gets the orientation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UVSize.U">
            <summary>
            Gets or sets the length in the direction of the orientation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UVSize.V">
            <summary>
            Gets or sets the length in the direction contrary to the orientation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UVSize.Size">
            <summary>
            Gets the size in UI coordinates.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UVSize.Width">
            <summary>
            Gets or sets the width in UI coordinates.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UVSize.Height">
            <summary>
            Gets or sets the height in UI coordinates.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.UVSize.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.C1KeyEventArgs">
            <summary>
            Substitutes KeyEventArgs in key handlers to enable testing
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ClearStyleExtensions">
            <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.MouseOverBrushProperty">
            <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetMouseOverBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetMouseOverBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the mouse over state.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.PressedBrushProperty">
            <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetPressedBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetPressedBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the pressed state.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.FocusBrushProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetFocusBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetFocusBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the focus state.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.ButtonBackgroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetButtonBackground(System.Windows.FrameworkElement)">
            <summary>
            Gets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetButtonBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the background of clear style button.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.ButtonForegroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetButtonForeground(System.Windows.FrameworkElement)">
            <summary>
            Gets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetButtonForeground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the foreground of clear style button.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.ButtonCornerRadiusProperty">
            <summary>
            This attached property can modify the corner radius of the buttons of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetButtonCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            Gets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetButtonCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            Sets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.ThumbCornerRadiusProperty">
            <summary>
            This attached property can modify the corner radius of the Thumb element of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetThumbCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            Gets the CornerRadius of the Thumb element.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetThumbCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            Sets the CornerRadius of the Thumb element.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.CaretBrushProperty">
            <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetCaretBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetCaretBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the caret state.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.CornerRadiusProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            Gets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            Sets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.WPF.Core.ClearStyleExtensions.ScrollBarStyleProperty">
            <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.GetScrollBarStyle(System.Windows.FrameworkElement)">
            <summary>
            Gets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ClearStyleExtensions.SetScrollBarStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The style used in scrollbars.</param>
        </member>
        <member name="T:C1.WPF.Core.CustomPropertyInfo">
            <summary>
            Class that encapsulates a PropertyDescriptor (can be used in WPF binding)
            and exposes it as a PropertyInfo.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.#ctor(System.Type,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.CustomPropertyInfo"/> class.
            </summary>
            <param name="declaringType">Decalaring type.</param>
            <param name="pd">Property descriptor.</param>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the name of this member.</returns>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
            <returns>The type of this property.</returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            Returns the value of the property with optional index values for indexed properties.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>
            The property value for the <paramref name="obj"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
              
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception>
              
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception>
              
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
              
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, returns the value of a property having the specified binding, index, and <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder"/> is null, the default binder is used.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property.</param>
            <returns>
            The property value for <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
              
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception>
              
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception>
              
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
              
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Sets the value of the property with optional index values for index properties.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="value">The new value for this property.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
              
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception>
              
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception>
              
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
              
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, sets the property value for the given object to the given value.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="value">The new value for this property.</param>
            <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"/> : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder"/> is null, the default binder is used.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
              
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception>
              
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception>
              
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
              
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property can be read.
            </summary>
            <returns>true if this property can be read; otherwise, false.</returns>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
            <returns>true if this property can be written to; otherwise, false.</returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, indicates whether one or more instance of <paramref name="attributeType"/> is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>
            true if one or more instance of <paramref name="attributeType"/> is applied to this member; otherwise false.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array containing all the custom attributes.
            </summary>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>
            An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.
            </returns>
            <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
              
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>
            An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.
            </returns>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
              
            <exception cref="T:System.ArgumentNullException">If <paramref name="attributeType"/> is null.</exception>
              
            <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
            <returns>The Type object for the class that declares this member.</returns>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.ReflectedType">
            <summary>
            Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <returns>The Type object through which this MemberInfo object was obtained.</returns>
        </member>
        <member name="P:C1.WPF.Core.CustomPropertyInfo.Attributes">
            <summary>
            Gets the attributes for this property.
            </summary>
            <returns>Attributes of this property.</returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetIndexParameters">
            <summary>
            When overridden in a derived class, returns an array of all the index parameters for the property.
            </summary>
            <returns>
            An array of type ParameterInfo containing the parameters for the indexes.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetSetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the set accessor for this property.
            </summary>
            <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if a non-public accessor is to be returned; otherwise, false.</param>
            <returns>
            Value Condition A <see cref="T:System.Reflection.MethodInfo"/> object representing the Set method for this property. The set accessor is public.-or- <paramref name="nonPublic"/> is true and the set accessor is non-public. null<paramref name="nonPublic"/> is true, but the property is read-only.-or- <paramref name="nonPublic"/> is false and the set accessor is non-public.-or- There is no set accessor.
            </returns>
            <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission"/> to reflect on this non-public method. </exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetGetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the public or non-public get accessor for this property.
            </summary>
            <param name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a non-public accessor is to be returned; otherwise, false.</param>
            <returns>
            A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic"/> is true. Returns null if <paramref name="nonPublic"/> is false and the get accessor is non-public, or if <paramref name="nonPublic"/> is true but no get accessors exist.
            </returns>
            <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission"/> to reflect on this non-public method. </exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetAccessors(System.Boolean)">
            <summary>
            Returns an array whose elements reflect the public and, if specified, non-public get, set, and other accessors of the property reflected by the current instance.
            </summary>
            <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false.</param>
            <returns>
            An array of <see cref="T:System.Reflection.MethodInfo"/> objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If <paramref name="nonPublic"/> is true, this array contains public and non-public get, set, and other accessors. If <paramref name="nonPublic"/> is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:C1.WPF.Core.CustomPropertyInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:C1.WPF.Core.C1DragDropManager">
            <summary>
            Provides methods for drag-and-drop operations.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.DragSourceStyle">
            <summary>
            Gets or sets the drag source style
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.DragTargetStyle">
            <summary>
            Gets or sets the drag target style
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.DragThreshold">
            <summary>
            Gets or sets the distance in pixels that the mouse must move before a drag operation starts.
            </summary>
            <remarks>
            This property affects the drag behavior of objects registered as drag sources using the
            <see cref="M:C1.WPF.Core.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.Core.DragDropEffect,System.Windows.Input.ModifierKeys,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.AutoScroll">
            <summary>
            Gets or sets whether the <see cref="T:C1.WPF.Core.C1DragDropManager"/> should automatically
            scroll the <see cref="T:System.Windows.Controls.ScrollViewer"/> that contains the drop target.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.AutoScrollEdge">
            <summary>
            Gets or sets the distance between the mouse and the edges of a drag target element that 
            triggers the auto scroll process.
            </summary>
            <remarks>
            This property is applicable only when <see cref="P:C1.WPF.Core.C1DragDropManager.AutoScroll"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.AutoScrollStep">
            <summary>
            Gets or sets the number of pixels to scroll in each auto scroll step.
            </summary>
            <remarks>
            This property is applicable only when <see cref="P:C1.WPF.Core.C1DragDropManager.AutoScroll"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.AutoScrollDelay">
            <summary>
            Gets or sets the number of milliseconds between auto scroll steps.
            </summary>
            <remarks>
            This property is applicable only when <see cref="P:C1.WPF.Core.C1DragDropManager.AutoScroll"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.Canvas">
            <summary>
            Gets a reference to the <see cref="P:C1.Silverlight.C1DragDropManager.Canvas" /> being used to show the drag-and-drop process.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.SourceMarker">
            <summary>
            Gets a reference to the <see cref="T:System.Windows.Controls.Border"/> used to highlight the drag source.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDropManager.TargetMarker">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.Border"/> used to indicate the drop location.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragStart">
            <summary>
            Fires when a drag drop process starts.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragEnter">
            <summary>
            Fires during a drag drop process, when the cursor enters a registered drop target.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragOver">
            <summary>
            Fires during a drag drop process, when the cursor moves over a registered drop target.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragLeave">
            <summary>
            Fires during a drag drop process, when the cursor leaves a registered drop target.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragDrop">
            <summary>
            Fires at the end of a drag drop process, when the user releases the mouse button over a registered drop target.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragDropManager.DragAutoScroll">
            <summary>
            Fires after the <see cref="T:C1.WPF.Core.C1DragDropManager"/> automatically scrolls a <see cref="T:System.Windows.Controls.ScrollViewer"/>
            in order to keep the drop location within view.
            </summary>
            <remarks>
            The <see cref="T:System.Windows.Controls.ScrollViewer"/> property of the <see cref="T:C1.WPF.Core.DragDropEventArgs"/> contains a reference
            to the <see cref="T:System.Windows.Controls.ScrollViewer"/> that was updated.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.ClearTargets">
            <summary>
            Removes all the registered targets
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.ClearSources">
            <summary>
            Removes all the registered sources
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.RegisterDropTarget(System.Windows.UIElement,System.Boolean)">
            <summary>
            Registers (or unregisters) an element as a drop target.
            </summary>
            <param name="target"><see cref="T:System.Windows.UIElement"/> that will act as a drop target.</param>
            <param name="register"><b>True</b> to register the element, <b>false</b> to unregister.</param>
            <remarks>
            The <paramref name="target"/> element should not be transparent, or it will
            not receive any mouse events and thus won't be able to act as a drop target.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.Core.DragDropEffect,System.Windows.Input.ModifierKeys,System.Boolean)">
            <summary>
            Registers a <see cref="T:System.Windows.UIElement"/> to act as a drag source.
            </summary>
            <param name="source"><see cref="T:System.Windows.UIElement"/> that will act as a drag source.</param>
            <param name="effect"><see cref="T:C1.WPF.Core.DragDropEffect"/> that will be supported by the <paramref name="source"/> object.</param>
            <param name="keys"><see cref="T:System.Windows.Input.ModifierKeys"/> that should be pressed in order for the drag operation to start.</param>
            <param name="handledEventsToo"></param>
            <remarks>
            <para>When a <see cref="T:System.Windows.UIElement"/> is registered as a drag source, the <see cref="T:C1.WPF.Core.C1DragDropManager"/> 
            monitors the mouse events for that element and starts drag-drop operations automatically when the user
            presses the mouse over the element and moves it for a few pixels.</para>
            <para>This is a convenience method, it is not strictly required; you could handle the mouse events 
            for the objects you want to use as drag sources and call the <see cref="M:C1.WPF.Core.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.Core.DragDropEffect)"/> method 
            explicitly.</para>
            <para>To un-register an element as a drag source, call the <b>RegisterDragSource</b> method passing
            the element and <b>DragDropEffect.None</b>.</para>
            <para>Note that only elements that raise mouse events may be used as automatic drag sources. 
            For example, the <see cref="T:System.Windows.Controls.Button"/> and <see cref="T:System.Windows.Controls.TextBox"/> controls consume mouse events 
            internally, so the <see cref="T:C1.WPF.Core.C1DragDropManager"/> does not receive any mouse events for these controls.
            Therefore, they cannot be used as automatic drag sources.</para>
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.UnregisterDragSource(System.Windows.UIElement)">
            <summary>
            Un-registers a <see cref="T:System.Windows.UIElement"/> as a drag source.
            </summary>
            <param name="source"><see cref="T:System.Windows.UIElement"/> that will no longer act as a drag source.</param>
            <remarks>
            Calling this method has the same effect as registering the element as a drag source with 
            no effects (DragDropEffect.None).
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.Core.DragDropEffect)">
            <summary>
            Initiates a drag drop operation using a <see cref="T:System.Windows.UIElement"/> as a source, supporting a specified <see cref="T:C1.WPF.Core.DragDropEffect"/>.
            </summary>
            <param name="source"><see cref="T:System.Windows.UIElement"/> that will be dragged.</param>
            <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the mouse position when the drag operation starts.</param>
            <param name="effect"><see cref="T:C1.WPF.Core.DragDropEffect"/> supported by the operation.</param>
            <remarks>
            <para>The <paramref name="e"/> is not strictly required, but is usually available since drag drop operations 
            are initiated by mouse actions. If you don't have a <see cref="T:System.Windows.Input.MouseEventArgs"/> to provide, pass <b>null</b> 
            instead.</para>
            <para>The method causes the drag operation to start, then returns immediately. The caller is responsible for 
            monitoring and completing the operation using the <see cref="E:C1.WPF.Core.C1DragDropManager.DragStart"/>, <see cref="E:C1.WPF.Core.C1DragDropManager.DragEnter"/>, 
            <see cref="E:C1.WPF.Core.C1DragDropManager.DragOver"/>, and <see cref="E:C1.WPF.Core.C1DragDropManager.DragDrop"/> events.</para>
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragStart(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragStart"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragEnter(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragEnter"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragOver(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragOver"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragLeave(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragLeave"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragDrop(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragDrop"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1DragDropManager.OnDragAutoScroll(C1.WPF.Core.DragDropEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Core.C1DragDropManager.DragAutoScroll"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.WPF.Core.DragDropEffect">
            <summary>
            Specifies the action that will be performed when the user drops a drag source into a drop target element.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DragDropEffect.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DragDropEffect.Move">
            <summary>
            Move the source element into the target element.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DragDropEffect.Copy">
            <summary>
            Copy the source element into the target element.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DragDropEventHandler">
            <summary>
            Method used to handle drag drop events.
            </summary>
            <param name="source">Object that raised the event.</param>
            <param name="e"><see cref="T:C1.WPF.Core.DragDropEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.WPF.Core.DragDropEventArgs">
            <summary>
            Class that contains data for drag-and-drop events.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DragDropEventArgs.DragSource">
            <summary>
            Gets the <see cref="T:System.Windows.UIElement"/> that is acting as a drag source.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DragDropEventArgs.DropTarget">
            <summary>
            Gets the <see cref="T:System.Windows.UIElement"/> that is acting as a drop target.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DragDropEventArgs.Effect">
            <summary>
            Gets or sets the <see cref="T:C1.WPF.Core.DragDropEffect"/> that will be applied when the user drops the 
            <see cref="P:C1.WPF.Core.DragDropEventArgs.DragSource"/> element into the <see cref="P:C1.WPF.Core.DragDropEventArgs.DropTarget"/> element.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DragDropEventArgs.ScrollViewer">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Core.DragDropEventArgs.ScrollViewer"/> that will scroll automatically during the
            drag drop operation when the mouse is near its edge.
            </summary>
            <remarks>
            The <see cref="T:C1.WPF.Core.C1DragDropManager"/> selects the <see cref="P:C1.WPF.Core.DragDropEventArgs.ScrollViewer"/> by default.
            If there are several nested scroll viewers, the innermost is selected by default. If that
            is not the desired behavior, callers may modify this behavior by setting this property to
            a reference to the desired <see cref="P:C1.WPF.Core.DragDropEventArgs.ScrollViewer"/>.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.DragDropEventArgs.#ctor(System.Windows.RoutedEventArgs,System.Windows.UIElement,System.Windows.UIElement,C1.WPF.Core.DragDropEffect,System.Windows.Controls.ScrollViewer)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Core.DragDropEventArgs"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> that contains mouse state information.</param>
            <param name="source"><see cref="T:System.Windows.UIElement"/> acting as a drag source.</param>
            <param name="target"><see cref="T:System.Windows.UIElement"/> acting as a drop target.</param>
            <param name="effect"><see cref="T:C1.WPF.Core.DragDropEffect"/> that specifies the action to be performed
            when the drag and drop process is completed.</param>
            <param name="scrollViewer"><see cref="P:C1.WPF.Core.DragDropEventArgs.ScrollViewer"/> that scrolls to show the target location.</param>
        </member>
        <member name="M:C1.WPF.Core.DragDropEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Gets the mouse coordinates relative to a given <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="relativeTo"><see cref="T:System.Windows.UIElement"/> that determines the coordinate system of the return value.</param>
            <returns>A <see cref="T:System.Windows.Point"/> that contains the mouse coordinates relative to the <see cref="T:System.Windows.UIElement"/>
            specified by the <paramref name="relativeTo"/> parameter.</returns>
        </member>
        <member name="T:C1.WPF.Core.EnhancedValidationVisualStateManager">
            <summary>
            Custom <see cref="T:System.Windows.VisualStateManager"/> that intercepts validation states raised by the system 
            and changes focus state to consider whether the focus is within the control 
            and allows simplifying the development of controls that aren't just textbox but a combination of textbox and buttons or other elements.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.EnhancedValidationVisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.IThemeProvider">
            <summary>
            Provides the <see cref="T:System.Windows.ResourceDictionary"/> object containing theme resources.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.IThemeProvider.ThemeResources">
            <summary>
            Returns the <see cref="T:System.Windows.ResourceDictionary"/> object containing theme resources.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ThemeExtensions">
            <summary>
            Provides helper methods to handle theme resources.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ThemeExtensions.GetLanguage(System.Windows.FrameworkElement)">
            <summary>
            GetLanguage
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ThemeExtensions.TryFindTheme(System.Windows.FrameworkElement)">
            <summary>
            Searches for theme resources in the visual tree.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ThemeExtensions.PropagatePropertiesToDialog(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.ResourceDictionary)">
            <summary>
            Propagates Language, FlowDirection and Theme properties from the parent control to the dialog window.
            </summary>
            <param name="parentControl">The <see cref="T:System.Windows.FrameworkElement"/> instance to copy properties from.</param>
            <param name="window">The <see cref="T:System.Windows.FrameworkElement"/> instance to apply properties to.</param>
            <param name="theme">The <see cref="T:System.Windows.ResourceDictionary"/> object which contains theme resources.</param>
        </member>
        <member name="T:C1.WPF.Core.KeyboardUtil">
            <summary>
            Keyboard utilities.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.KeyboardUtil.Shift">
            <summary>
            Gets a value indicating whether shift key is pressed.
            </summary>
            <value><c>true</c> if shift key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.WPF.Core.KeyboardUtil.Ctrl">
            <summary>
            Gets a value indicating whether ctrl key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.WPF.Core.KeyboardUtil.Alt">
            <summary>
            Gets a value indicating whether alt key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.WPF.Core.KeyboardUtil.Command">
            <summary>
            Returns whether ctrl or apple key are pressed.
            </summary>
            <remarks>
            Useful for handling shortcuts in Windows and Mac.
            </remarks>
        </member>
        <member name="T:C1.WPF.Core.NestedPropertySetter">
            <summary>
            Represents a property setter which is able to assign a value to a nested property.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.NestedPropertySetter.PropertyNameProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.NestedPropertySetter.PropertyName"/> dependency property.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.NestedPropertySetter.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.NestedPropertySetter.Value"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.NestedPropertySetter.PropertyName">
            <summary>
            Gets or sets a path to a nested property relative to the owning control class. This is a dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.NestedPropertySetter.Value">
            <summary>
            Gets or sets a value that should be assigned to the <see cref="P:C1.WPF.Core.NestedPropertySetter.PropertyName"/>
            property. This is a dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.NestedPropertySetter.TargetObject">
            <summary>
            This property is used for internal purposes only.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetter.Apply(System.Object)">
            <summary>
            This method is used for internal purposes only.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetter.EvaluatePropGetChain(System.Object,System.String[])">
            <summary>
            For the specified object <paramref name="obj"/> evaluates
            a chain of get property accessors with names specified in
            the <paramref name="propChain"/> collection.
            If any problem met then returns null.
            If <paramref name="propChain"/> is null or empty returns
            <paramref name="obj"/>.
            </summary>
            <param name="obj"></param>
            <param name="propChain"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.NestedPropertySetterCollection">
            <summary>
            Represents a collection of <see cref="T:C1.WPF.Core.NestedPropertySetter"/> objects.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetterCollection.#ctor(System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.Core.NestedPropertySetterCollection"/> class.
            </summary>
            <param name="owner">The owning object.</param>
        </member>
        <member name="P:C1.WPF.Core.NestedPropertySetterCollection.Owner">
            <summary>
            Gets the owning object.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetterCollection.InsertItem(System.Int32,C1.WPF.Core.NestedPropertySetter)">
            <summary>
            Overrides the default behavior.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetterCollection.RemoveItem(System.Int32)">
            <summary>
            Overrides the default behavior.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.WPF.Core.NestedPropertySetterCollection.ClearItems">
            <summary>
            Overrides the default behavior.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ILogicalParent">
            <summary>
            Defines method to add logical children.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ILogicalParent.AddLogicalChildInternal(System.Object)">
            <summary>
            Adds the provided object to the logical tree of this element.
            </summary>
            <param name="child">Child element to be added.</param>
        </member>
        <member name="M:C1.WPF.Core.ILogicalParent.RemoveLogicalChildInternal(System.Object)">
            <summary>
            Removes the provided object from this element's logical tree. 
            </summary>
            <param name="child">The element to remove.</param>
        </member>
        <member name="T:C1.WPF.Core.ScrollBarCornerRadiusBuilder">
            <summary>
            Element used inside ScrollBar template in order to provide the appropriate CornerRadius for the scrollbar buttons.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopLeft">
            <summary>
            Gets or sets a value indicating whether top-left corner value will be taken from <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopLeftProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopRight">
            <summary>
            Gets or sets a value indicating whether top-right corner value will be taken from <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopRightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.TopRight"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomLeft">
            <summary>
            Gets or sets a value indicating whether bottom-left corner value will be taken from <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomLeftProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomRight">
            <summary>
            Gets or sets a value indicating whether bottom-right corner value will be taken from <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomRightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.BottomRight"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius">
            <summary>
            Gets or sets the corner radius of the scrollbar itself.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ButtonCornerRadius">
            <summary>
            Gets or sets the corner radius of the buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ButtonCornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.ButtonCornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollBarCornerRadiusBuilder.Output">
            <summary>
            Gets the corner radius that will be applied to the buttons.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.ScrollBarCornerRadiusBuilder.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollBarCornerRadiusBuilder.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="T:C1.WPF.Core.ScrollViewerCornerRadiusBase">
            <summary>
            Element used inside ScrollViewer template in order to provide the appropriate CornerRadius for the scrollbars and scroll content presenter.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerCornerRadiusBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.ScrollViewerCornerRadiusBase"/> class.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.CornerRadius">
            <summary>
            Gets or sets the CornerRadius used in the ScrollViewer.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerCornerRadiusBase.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility"/> dependency property.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.ScrollViewerCornerRadiusBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerCornerRadiusBase.UpdateOutput">
            <summary>
            Updates the output when one of the dependant values changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerCornerRadiusBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="T:C1.WPF.Core.ScrollViewerCornerRadiusBuilder">
            <summary>
            Element used inside ScrollViewer template in order to provide the appropriate CornerRadius for the scrollbars.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerCornerRadiusBuilder.Orientation">
            <summary>
            Gets or sets the orientation of the scrollbar for which this builder will be used.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerCornerRadiusBuilder.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerCornerRadiusBuilder.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerCornerRadiusBuilder.Output">
            <summary>
            Gets the resulting CornerRadius that will be used in the scrollbar.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerCornerRadiusBuilder.UpdateOutput">
            <summary>
            Updates the output when one of the dependant values changed.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ScrollViewerContentPresenterClip">
            <summary>
            Element used inside ScrollViewer template in order to provide the appropriate Clip for ScrollContentPresenter.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerContentPresenterClip.ScrollContentPresenter">
            <summary>
            Gets or sets the scroll content presenter which will be clipped.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerContentPresenterClip.ScrollContentPresenterProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerContentPresenterClip.ScrollContentPresenter"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerContentPresenterClip.Output">
            <summary>
            Gets the resulting Clip geometry that will be used in the scroll content presenter.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerContentPresenterClip.UpdateOutput">
            <summary>
            Updates the output when one of the dependant values changed.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ScrollViewerTouchBehavior">
            <summary>
            Adds touch support to MS ScrollViewer to scroll with the finger over the scrolling area.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerTouchBehavior.GetTouchBehavior(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets the touch behavior associated with the specified ScrollViewer.
            </summary>
            <param name="scrollViewer">The scroll viewer which has the touch behavior attached.</param>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerTouchBehavior.SetTouchBehavior(System.Windows.Controls.ScrollViewer,C1.WPF.Core.ScrollViewerTouchBehavior)">
            <summary>
            Sets a touch behavior to a ScrollViewer.
            </summary>
            <param name="scrollViewer">The scroll viewer that will be able to be scrolled with the finger.</param>
            <param name="value">The touch behavior instance.</param>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerTouchBehavior.TouchBehaviorProperty">
            <summary>
            Identifies the TouchBehavior attached property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerTouchBehavior.HasInertia">
            <summary>
            Gets or sets a value indicating whether the touch scrolling will have inertia.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerTouchBehavior.HasInertiaProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerTouchBehavior.HasInertia"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerTouchBehavior.PanningDirection">
            <summary>
            Gets or sets the panning direction.
            </summary>
            <remarks>
            It only applies if IgnoreSwipe is set to true.
            </remarks>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerTouchBehavior.PanningDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerTouchBehavior.PanningDirection"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerTouchBehavior.IgnoreSwipe">
            <summary>
            Gets or sets a value indicating whether the swipe gesture is ignored.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ScrollViewerTouchBehavior.IgnoreSwipeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.ScrollViewerTouchBehavior.IgnoreSwipe"/> dependency property.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.TypographyExtensions">
            <summary>
            Provides access to extended typography properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.TypographyExtensions.GetCharacterCasing(System.Windows.DependencyObject)">
            <summary>
            Gets the character casing for an element.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The elements's character casing.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypographyExtensions.SetCharacterCasing(System.Windows.DependencyObject,System.Windows.Controls.CharacterCasing)">
            <summary>
            Sets the character casing for an element.
            </summary>
            <param name="element">The element on which to set the CharacterCasing attached property..</param>
            <param name="value">The <see cref="T:System.Windows.Controls.CharacterCasing"/> value to set.</param>
        </member>
        <member name="F:C1.WPF.Core.TypographyExtensions.CharacterCasingProperty">
            <summary>
            Identifies the CharacterCasing attached property. 
            </summary>
            <remarks>This property is inheritable. If you set it on some control like a <see cref="T:System.Windows.Controls.Button"/>, 
            it will be applied to all <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="T:System.Windows.Controls.AccessText"/> elements inside the button's visual tree.</remarks>
        </member>
        <member name="T:C1.WPF.Core.CaseConverter">
            <summary>
            Converter to use in Text properyt bindings
            </summary>
        </member>
        <member name="M:C1.WPF.Core.UIElementAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Override.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:C1.WPF.Core.UIElementAdorner.OffsetLeft">
            <summary>
            Gets/sets the horizontal offset of the adorner.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.UIElementAdorner.SetOffsets(System.Double,System.Double)">
            <summary>
            Updates the location of the adorner in one atomic operation.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="P:C1.WPF.Core.UIElementAdorner.OffsetTop">
            <summary>
            Gets/sets the vertical offset of the adorner.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.UIElementAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.UIElementAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.UIElementAdorner.GetVisualChild(System.Int32)">
            <summary>
            Override.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.WPF.Core.UIElementAdorner.LogicalChildren">
            <summary>
            Override.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.UIElementAdorner.VisualChildrenCount">
            <summary>
            Override.  Always returns 1.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.GridLengthConverter">
            <summary>
            Represents a <see cref="T:System.Windows.GridLength"/> converter.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.GridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.GridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.StringArrayTypeConverter">
            <summary>
            Converts a string into an array of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.StringArrayTypeConverter.Parse(System.String)">
            <summary>
            Parses a string and convert it to an array of strings.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.Automation.ScrollViewerAutomationPeer">
            <summary>
            Automation peer for <see cref="T:C1.WPF.Core.C1ScrollViewer"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Automation.ScrollViewerAutomationPeer.#ctor(C1.WPF.Core.C1ScrollViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.Automation.ScrollViewerAutomationPeer"/> class.
            </summary>
            <param name="owner">The FrameworkElement associated with this <see cref="T:C1.WPF.Core.Automation.ScrollViewerAutomationPeer"/>.</param>
        </member>
        <member name="T:C1.WPF.Core.C1ActivityIndicator">
            <summary>
            A visual control used to indicate that something is ongoing.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ActivityIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ActivityIndicator"/> class.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ActivityIndicator.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ActivityIndicator.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:C1.WPF.Core.C1ActivityIndicator.EllipseDiameter">
            <summary>
            Gets the diameter of the ellipse.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ActivityIndicator.EllipseOffset">
            <summary>
            Gets the ellipse offset.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1Animation">
            <summary>
            Contains information about a specific animation.      
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Animation.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Core.C1Animation"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Animation.StartDelay">
            <summary>
            Gets or sets the elapsed time before the animation starts.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Animation.Duration">
            <summary>
            Gets or sets the duration time of the animation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Animation.Easing">
            <summary>
            Gets or sets the easing funtion used to interpolate the values of the animation.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1Easing">
            <summary>
            Easing function used to interpolate the values of an animation.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Core.C1Easing"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Core.C1Easing"/>.
            </summary>
            <param name="function">Easing function.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.#ctor(System.Windows.Media.Animation.EasingFunctionBase)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Core.C1Easing"/>.
            </summary>
            <param name="easeFunction">Function used to interpolate the animation.</param>
        </member>
        <member name="P:C1.WPF.Core.C1Easing.CircleOut">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Easing.CircleIn">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Easing.Linear">
            <summary>
            Gets a linear easing function.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.Ease(System.Double)">
            <summary>
            Applies the easing function to the specified value input.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.GetEasingFunction">
            <summary>
            Gets the easing function.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Easing.op_Implicit(System.Windows.Media.Animation.EasingFunctionBase)~C1.WPF.Core.C1Easing">
            <summary>
            Allows assigning a <see cref="T:C1.WPF.Core.C1Easing"/> from a native counterpart.
            </summary>
            <param name="easing"></param>
        </member>
        <member name="T:C1.WPF.Core.C1Behavior`1">
            <summary>
            Base class for control behaviors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:C1.WPF.Core.C1Behavior`1.OnAttachedTo(`0)">
            <summary>
            Called when the behavior is attached to the control.
            </summary>
            <param name="view">The view to which the behavior is attached.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Behavior`1.OnDetachingFrom(`0)">
            <summary>
            Called before the behavior is detached from the control.
            </summary>
            <param name="view">The view to which the behavior is attached.</param>
        </member>
        <member name="T:C1.WPF.Core.C1Border">
            <summary>
            Basic control used to draw a border around another view.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Border.Content">
            <summary>
            Gets or sets the content to show inside the border.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Border._borderAlignment">
            <summary>
            Gets or sets the way to draw the borders.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.AddLogicalChildInternal(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:C1.WPF.Core.C1Border.RemoveLogicalChildInternal(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:C1.WPF.Core.C1Border.ContentPadding">
            <summary>
            Gets the actual padding of the content
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.GetInsideMeasureSize(System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Gets the measure of the content of the border, including paddings.
            </summary>
            <param name="insideAvailableSize">The available size.</param>
            <param name="exactWidth">Specifies whether the content is measured with the exact width.</param>
            <param name="exactHeight">Specifies whether the content is measured with the exact height.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Border.GetContentMeasureSize(System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Gets the measure of the content of the border.
            </summary>
            <param name="contentAvailableSize">The available size.</param>
            <param name="exactWidth">Specifies whether the content is measured with the exact width.</param>
            <param name="exactHeight">Specifies whether the content is measured with the exact height.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1Border.LayoutInside(System.Windows.Rect)">
            <summary>
            Layout the part inside the border in the specified <paramref name="insideFinalSize"/>.
            </summary>
            <param name="insideFinalSize">The <see cref="T:System.Windows.Rect"/> where the party of inside is laid out.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Border.LayoutContent(System.Windows.Rect)">
            <summary>
            Layout the content of the border in the specified <paramref name="contentFinalSize"/>.
            </summary>
            <param name="contentFinalSize">The <see cref="T:System.Windows.Rect"/> where the content is laid out.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Border.OnRenderBackground(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draw the background of the control in the specified <paramref name="drawingContext"/>.
            </summary>
            <remarks>The performed drawings will be clipped if <see cref="T:System.Windows.CornerRadius"/> is specified.</remarks>
            <param name="drawingContext">The drawing context used to paint the background.</param>
            <param name="backgroundArea">The rectangle of the background.</param>
        </member>
        <member name="P:C1.WPF.Core.C1Border.NeedsRenderContent">
            <summary>
            Gets whether the <see cref="M:C1.WPF.Core.C1Border.OnRenderContent(System.Windows.Media.DrawingContext,System.Windows.Rect)"/> method needs to be executed and the clipping of the content.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.OnRenderContent(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draw the content of the control in the specified <paramref name="drawingContext"/>.
            </summary>
            <remarks>The performed drawings will be clipped if <see cref="T:System.Windows.CornerRadius"/> is specified.</remarks>
            <param name="drawingContext">The drawing context used to paint the background.</param>
            <param name="contentArea">The rectangle of the content. This already includes the padding.</param>
        </member>
        <member name="M:C1.WPF.Core.C1Border.OnBorderAlignmentChanged">
            <summary>
            Called when the border alignment changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1Border"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1Border.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1Border.BorderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Border.BorderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Border.BorderAlignment">
            <summary>
            Gets or sets the way to draw the borders.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Border.MeasureInternal(System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Called to get the desired-size of this view for the specified <paramref name="availableSize"/>.
            </summary>
            <param name="availableSize">The available size to measure this view. This size can have infinite width or height.</param>
            <param name="exactWidth"></param>
            <param name="exactHeight"></param>
            <returns>The returned size must be finite.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1Border.ArrangeInternal(System.Windows.Size)">
            <summary>
            When called it determines the children views to their final positions.
            </summary>
            <param name="finalSize">The size the layout assigns to this view.</param>
            <returns>The final position it takes up.</returns>
        </member>
        <member name="T:C1.WPF.Core.BorderAlignment">
            <summary>
            Determines the way to draw the borders of <see cref="T:C1.WPF.Core.C1Border"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BorderAlignment.Inner">
            <summary>
            Draw the borders inside the bound's edges
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BorderAlignment.Center">
            <summary>
            Draw the borders centering the bound's edges
            </summary>
        </member>
        <member name="F:C1.WPF.Core.BorderAlignment.Outer">
            <summary>
            Draw the border outer the bound's edges
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1Button">
            <summary>
            Button with a built-in style matching the suite.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button._cornerRadius">
            <summary>
            Gets or sets the corners radius.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button._borderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.AccentStyle">
            <summary>
            Gets a style used for default buttons.
            </summary>
            <remarks>In most cases you don't need to use this property directly. This style will be applied automatically if <see cref="P:System.Windows.Controls.Button.IsDefault"/> property is true. </remarks>
        </member>
        <member name="P:C1.WPF.Core.C1Button.AccentStyleKey">
            <summary>
            Resource key for a button accent style.
            </summary>
            <remarks>The <see cref="P:C1.WPF.Core.C1Button.AccentStyleKey"/> property can be used to create a dynamic reference to the accent style. 
            This dynamic reference will automatically update if application theme is changed. 
            <example>
            <code>
            <![CDATA[
            <c1:C1Button Content="Default Button" Style="{DynamicResource {x:Static c1:C1Button.AccentStyleKey}}" IsDefault="True"/>
            ]]>
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1Button.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Core.C1Button.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"><inheritdoc/></param>
        </member>
        <member name="M:C1.WPF.Core.C1Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1Button"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Button.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1Button"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Button.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1Button.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Button.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1Button.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1Button.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Button.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Button.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Button.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Button.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.CornerRadius">
            <summary>
            Gets or sets the corners radius.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Button.BorderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1Button.BorderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1Button.BorderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1CheckBox">
            <summary>
            Represents a control that a user can select and clear.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"><inheritdoc/></param>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1CheckBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1CheckBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1CheckBox.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1CheckBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.C1ContentControl">
            <summary>
            Button with a built-in style matching the suite.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ContentControl._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Core.C1ContentControl.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1ContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1ContentControl.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ContentControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ContentControl.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ContentControl.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ContentControl.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:System.Windows.CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1HierarchicalDataTemplate">
            <summary>
            Represents a DataTemplate that supports C1HierarchicalPresenter, such as TreeViewItem.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the binding for this data template, which indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate to apply to the ItemTemplate property on a generated
            C1HierarchicalPresenter (such as a TreeViewItem), to indicate how to display
            items from the next level in the data hierarchy.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1HierarchicalPresenter">
            <summary>
            Represents a control that can be used to present a hierarchical collection of items.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HierarchicalPresenter._header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HierarchicalPresenter._headerTemplate">
            <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1HierarchicalPresenter.ItemPrepared">
            <summary>
            Occurs when a C1HierarchicalPresenter child item is prepared
            (PrepareContainerForItemOverride was invoked).
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.OnItemPrepared(C1.WPF.Core.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1HierarchicalPresenter.ItemPrepared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.WPF.Core.C1HierarchicalPresenter.ItemCleared">
            <summary>
            Occurs when a C1HierarchicalPresenter child item is cleared.
            (ClearContainerForItemOverride was invoked).
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.OnItemCleared(C1.WPF.Core.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1HierarchicalPresenter.ItemCleared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.ItemConverter">
            <summary>
            The ItemConverter performs the conversion from a <see cref="T:C1HierarchicalPresenter" /> instance to its String
            representation.
            If not set by the user, the default converter will be used.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.ParentCollection">
            <summary>
            Gets the items collection of this element's parent. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.ParentItemsSource">
            <summary>
            Returns this element's parent ItemsSource Property. 
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.IsAncestorOf(C1.WPF.Core.C1HierarchicalPresenter)">
            <summary>
            Determines whether the <see cref="T:C1HierarchicalPresenter" /> is an ancestor of the descendant element.
            </summary>
            <param name="descendant">The descendant <see cref="T:C1HierarchicalPresenter" />.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.InitializeItem(C1.WPF.Core.C1HierarchicalPresenter)">
            <summary>
            Initializes a <see cref="T:C1HierarchicalPresenter" /> by setting its parent and root elements
            in the hierarchy.
            </summary>
            <remarks>
            This method should be invoked only when we want to force the initialization of an item 
            before it gets visible. Otherwise the item will be initialized automatically before becoming
            visible.
            </remarks>
            <param name="rootPresenter">The <see cref="T:C1HierarchicalPresenter" /> whose this item belongs to.</param>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.ToList``1">
            <summary>
            Creates a list with all the item containers present in the Hierarchical Presenter at
            the moment of invocation.
            </summary>
            <typeparam name="T">The type of the container, e.g. C1TreeViewItem</typeparam>
            <returns>The list of item containers.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.OnHeaderChanged">
            <summary>
            Called when the value of the <see cref="P:Header"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HierarchicalPresenter"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HierarchicalPresenter.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HierarchicalPresenter.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HierarchicalPresenter.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HierarchicalPresenter.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HierarchicalPresenter.HeaderTemplate">
            <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HierarchicalPresenter.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ItemPreparedEventArgs">
            <summary>
            Contains event data for the item prepared/cleared event.
            The event is associated to the PrepareContainerForItemOverride and ClearContainerForItemOverride
            methods of classes derived from C1HierarchicalPresenter. PrepareContainerForItemOverride and
            ClearContainerForItemOverride are invoked to prepare/clear a visual element to display the 
            specified data bound item.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ItemPreparedEventArgs.Element">
            <summary>
            The element used to display the specified item.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ItemPreparedEventArgs.Item">
            <summary>
            The item to display.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1Icon">
            <summary>
            Represents a visual icon that can be tinted and resized.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Icon.DEFAULT_WIDTH">
            <summary>
            The default width of an icon.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1Icon.DEFAULT_HEIGHT">
            <summary>
            The default height of an icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Icon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1Icon.CloneOverride">
            <summary>
            When overridden, it creates a copy of the icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1Icon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1Icon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1Icon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1Icon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.C1CompositeIcon">
            <summary>
            Represent an icon created from a list of icons superposed one on top of the other.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CompositeIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1CompositeIcon.Icons">
            <summary>
            Gets the list of icons that will be rendered.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1CompositeIcon.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CompositeIcon.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:C1.WPF.Core.C1CompositeIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1CompositeIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1CompositeIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1CompositeIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Core.C1FontIcon">
            <summary>
            Represents an icon created from a font.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1FontIcon._text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="P:System.Windows.Controls.Control.FontFamily"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1FontIcon._textDecorations">
            <summary>
            Gets or sets a TextDecorations that contains the effects to apply to the text.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1FontIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1FontIcon.OnFlowDirectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1FontIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1FontIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1FontIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1FontIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1FontIcon.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1FontIcon.Text"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1FontIcon.Text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="P:System.Windows.Controls.Control.FontFamily" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1FontIcon.TextDecorationsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1FontIcon.TextDecorations"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1FontIcon.TextDecorations">
            <summary>
            Gets or sets a TextDecorations that contains the effects to apply to the text.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1VectorIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon._geometry">
            <summary>
            Gets the geometry of the vector.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon._viewBox">
            <summary>
            Gets or sets the rectangle (in the path coordinates) which will determine what part will be drawn.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon._strokeThickness">
            <summary>
            The stroke thickness
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon._strokeBrush">
            <summary>
            Gets or sets the brush of the stroke.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1VectorIcon.UpdateGeometry">
            <summary>
            This will recreate the geometry and update the path.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1VectorIcon.CreateGeometry">
            <summary>
            This method is called to create the geometry of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1VectorIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1VectorIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1VectorIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1VectorIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon.ViewBoxProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1VectorIcon.ViewBox"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1VectorIcon.ViewBox">
            <summary>
            Gets or sets the rectangle (in the path coordinates) which will determine what part will be drawn.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1VectorIcon.StrokeThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1VectorIcon.StrokeThickness">
            <summary>
            The stroke thickness
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1VectorIcon.StrokeBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1VectorIcon.StrokeBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1VectorIcon.StrokeBrush">
            <summary>
            Gets or sets the brush of the stroke.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1PathIcon">
            <summary>
            Represent an icon created from a path string.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PathIcon._data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PathIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PathIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1PathIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PathIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1PathIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1PathIcon.DataProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1PathIcon.Data"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1PathIcon.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1PolygonIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PolygonIcon._points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PolygonIcon._isClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PolygonIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PolygonIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1PolygonIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1PolygonIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1PolygonIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1PolygonIcon.PointsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1PolygonIcon.Points"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1PolygonIcon.Points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PolygonIcon.IsClosedProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1PolygonIcon.IsClosed"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1PolygonIcon.IsClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1BitmapIcon">
            <summary>
            Represents an icon created from an image.
            </summary>
            <remarks>
            The file that you use should be a solid image on a transparent background.
            The bitmap image is expected to be a true bitmap that has transparent pixels and non-transparent pixels.
            The recommended format is PNG. Other file-format image sources will load but result in a solid block of the foreground color.
            </remarks>
        </member>
        <member name="F:C1.WPF.Core.C1BitmapIcon._source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1BitmapIcon._showAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1BitmapIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1BitmapIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1BitmapIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1BitmapIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1BitmapIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1BitmapIcon.SourceProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1BitmapIcon.Source"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1BitmapIcon.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1BitmapIcon.ShowAsMonochromeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1BitmapIcon.ShowAsMonochrome"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1BitmapIcon.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1SVGIcon">
            <summary>
            Represents an icon created from an svg file.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SVGIcon._source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1SVGIcon.ViewBox">
            <summary>
            Gets the viewBox of the svg file.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1SVGIcon.Clone">
            <summary>
            Creates a copy of the icon.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1SVGIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1SVGIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1SVGIcon.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1SVGIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1SVGIcon.SourceProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1SVGIcon.Source"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1SVGIcon.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1IconTemplate">
            <summary>
            This factory allows creating <see cref="T:C1.WPF.Core.C1Icon"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1IconTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1IconTemplate"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1IconTemplate.CreateIcon">
            <summary>
            Creates a new icon.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Star5">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Close">
            <summary>
            Gets an icon representing a close icon.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Edit">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Asterisk">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ArrowUp">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ArrowDown">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ChevronUp">
            <summary>
            Gets an icon representing a chevron pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ChevronDown">
            <summary>
            Gets an icon representing a chevron pointing down.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ChevronLeft">
            <summary>
            Gets an icon representing a chevron pointing to the left.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ChevronRight">
            <summary>
            Gets an icon representing a chevron pointing to the right.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleNorth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleNorthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north east.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing east.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleSouthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south east.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleSouth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing down.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleSouthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south west.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing west.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleNorthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north west.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing upwards.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleRightUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleRight">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleRightDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right down.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing downwards.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleLeftDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left down.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleLeft">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.TriangleLeftUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left up.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ThreeDotsHorizontal">
            <summary>
            Gets an icon representing three horizontal dots.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.ThreeDotsVertical">
            <summary>
            Gets an icon representing three vertical dots.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Funnel">
            <summary>
            Gets an icon representing a funnel.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Function">
            <summary>
            Gets an icon representing a function.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Gear">
            <summary>
            Gets an icon representing a gear.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Copy">
            <summary>
            Gets an icon representing a copy operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Cut">
            <summary>
            Gets an icon representing a cut operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Paste">
            <summary>
            Gets an icon representing a paste operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Delete">
            <summary>
            Gets an icon representing a delete operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.SelectAll">
            <summary>
            Gets an icon representing a select-all operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.Undo">
            <summary>
            Gets an icon representing an undo operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1IconTemplate.AlertCircle">
            <summary>
            Gets an icon representing an alert.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ItemsControl._itemTemplate">
            <summary>
            Gets or sets the template applied to all the items of the list.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ItemsControl._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Core.C1ItemsControl.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ItemsControl.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ItemsControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1ItemsControl.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ItemsControl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ItemsControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ItemsControl.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ItemsControl.ItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ItemsControl.ItemTemplate">
            <summary>
            Gets or sets the template applied to all the items of the list.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ItemsControl.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ItemsControl.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ItemsControl.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:System.Windows.CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1HeaderedItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items which have header and content.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedItemsControl._headerTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedItemsControl._headerTemplateSelector">
            <summary>
            Template selector used to specify different templates applied to the headers of the items.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HeaderedItemsControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedItemsControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedItemsControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplateSelector"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedItemsControl.HeaderTemplateSelector">
            <summary>
            Template selector used to specify different templates applied to the headers of the items.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1HeaderedContentControl">
            <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._header">
            <summary>
            Gets or sets the header of this control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerFontFamily">
            <summary>
            Gets or sets the font family of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerFontSize">
            <summary>
            Gets or sets the font size of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerFontStretch">
            <summary>
            Gets or sets the font stretch of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerFontStyle">
            <summary>
            Gets or sets the font style of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerFontWeight">
            <summary>
            Gets or sets the font weight of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerPadding">
            <summary>
            Gets or sets the padding of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._horizontalHeaderAlignment">
            <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._verticalHeaderAlignment">
            <summary>
            Gets or sets the VerticalHeaderAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.ActualHeaderForeground">
            <summary>
            Returns the <see cref="T:System.Windows.Media.Brush" /> object to use as HeaderForeground inside control template. 
            </summary>
            <remarks>If <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderForeground"/> property is not set, this property falls back to the <see cref="P:System.Windows.Controls.Control.Foreground"/> property value.</remarks>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl._headerForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HeaderedContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1HeaderedContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.Header">
            <summary>
            Gets or sets the header of this control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderFontFamilyProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontFamily"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontFamily">
            <summary>
            Gets or sets the font family of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderFontSizeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontSize"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontSize">
            <summary>
            Gets or sets the font size of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStretchProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStretch"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStretch">
            <summary>
            Gets or sets the font stretch of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontStyle">
            <summary>
            Gets or sets the font style of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderFontWeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontWeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderFontWeight">
            <summary>
            Gets or sets the font weight of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderPaddingProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderPadding"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderPadding">
            <summary>
            Gets or sets the padding of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HorizontalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HorizontalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HorizontalHeaderAlignment">
            <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.VerticalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.VerticalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.VerticalHeaderAlignment">
            <summary>
            Gets or sets the VerticalHeaderAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1HeaderedContentControl.HeaderForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1HeaderedContentControl.HeaderForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1HeaderedContentControl.HeaderForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HeaderedContentControl.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1KeyboardHelper">
            <summary>
            This class allows accessing keyboard-related information and constants.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Back">
            <summary>
            The Backspace key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Menu">
            <summary>
            The Application key (Microsoft Natural Keyboard). Also known as the Menu key, 
            as it displays an application-specific context menu.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Plus">
            <summary>
            The Add key.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1KeyboardHelper.Minus">
            <summary>
             The Subtract key.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.IsCtrlPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns whether the Ctrl key is pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Ctrl key is pressed, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.IsShiftPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns whether the Shift key is pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Shift key is pressed, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.IsAltPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns whether the Alt key is pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Alt key is pressed, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.IsCommandPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns whether the Command key is pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Command key is pressed, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.GetKey(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns <see cref="T:System.Windows.Input.Key"/> that was pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Command key is pressed, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1KeyboardHelper.GetChar(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns char representation of <see cref="T:System.Windows.Input.Key"/> that was pressed.
            </summary>
            <param name="keyEvent">Data from keyboard routed events, as well as related attached and Preview events.</param>
            <returns>true if the Command key is pressed, false otherwise.</returns>
        </member>
        <member name="T:C1.WPF.Core.C1LayoutTransformer">
            <summary>
            Represents a layout transformer control with a single piece of content of any type.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer._layoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.IsSizeSmallerOrClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1LayoutTransformer"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1LayoutTransformer.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1LayoutTransformer.Dispose">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1LayoutTransformer.LayoutTransform"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.IOrderedSet`1">
            <summary>
            Defines methods to manipulate ordered sets.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="P:C1.WPF.Core.IOrderedSet`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:C1.WPF.Core.IOrderedSet`1.AddRange(`0,`0)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.WPF.Core.IOrderedSet`1.RemoveRange(`0,`0)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.C1OrderedSet">
            <summary>
            Collection of ordered <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1OrderedSet"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.#ctor(C1.WPF.Core.C1OrderedSet)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1OrderedSet"/> class.
            </summary>
            <param name="set">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1OrderedSet"/> class.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1OrderedSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Add(System.Int32)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Add(C1.WPF.Core.C1OrderedSet)">
            <summary>
            Joins the specified set.
            </summary>
            <param name="set">The set to join.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:C1.WPF.Core.C1OrderedSet.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:C1.WPF.Core.C1OrderedSet.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Remove(C1.WPF.Core.C1OrderedSet)">
            <summary>
            Removes the specified items.
            </summary>
            <param name="removedItems">The removed items.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Coalesce">
            <summary>
            Coalesces the ranges.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.Parse(System.String)">
            <summary>
            Parses the text with the format '1-3,5-7,9,13' and returns the <see cref="T:C1.WPF.Core.C1OrderedSet"/>.
            </summary>
            <param name="text">The text to parse.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.TryParse(System.String,C1.WPF.Core.C1OrderedSet@)">
            <summary>
            Tries to parse the text with the format '1-3,5-7,9,13' and return the <see cref="T:C1.WPF.Core.C1OrderedSet"/>.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="orderedSet">The parsed <see cref="T:C1.WPF.Core.C1OrderedSet"/>.</param>
        </member>
        <member name="M:C1.WPF.Core.C1OrderedSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:C1.WPF.Core.C1RepeatButton">
            <summary>
            RepeatButton with a built-in style matching the suite.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton._cornerRadius">
            <summary>
            Gets or sets the corners radius.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton._borderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RepeatButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1RepeatButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RepeatButton.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1RepeatButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RepeatButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1RepeatButton.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1RepeatButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1RepeatButton.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1RepeatButton.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1RepeatButton.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1RepeatButton.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.CornerRadius">
            <summary>
            Gets or sets the corners radius.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1RepeatButton.BorderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1RepeatButton.BorderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1RepeatButton.BorderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewer">
            <summary>
            Represents a scrollable area that can contain other visible elements.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._topLeftHeader">
            <summary>
            Gets or sets the content of the top-left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._topHeader">
            <summary>
            Gets or sets the content of the top header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._topRightHeader">
            <summary>
            Gets or sets the content of the top right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._rightHeader">
            <summary>
            Gets or sets the content of the right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._bottomRightHeader">
            <summary>
            Gets or sets the content of the bottom right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._leftHeader">
            <summary>
            Gets or sets the content of the left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._bottomHeader">
            <summary>
            Gets or sets the content of the bottom header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._bottomLeftHeader">
            <summary>
            Gets or sets the content of the bottom-left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._horizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._verticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._horizontalSmallChange">
            <summary>
            Gets or sets how long the content is scrolled horizontally when pressing scrollbar buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._verticalSmallChange">
            <summary>
            Gets or sets how long the content is scrolled vertically when pressing scrollbar buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._bringIntoViewOnFocusChange">
            <summary>
            Gets or sets a value that determines whether the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> uses a bring-into-view scroll behavior when an item in the view gets focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._emptyBackground">
            <summary>
            Gets or sets a brush that describes the background of an empty space in the corner between the vertical and horizontal scrollbars.
            </summary>
            <remarks>
            This empty space is only visible when both the vertical and horizontal scrollbars are visible.
            </remarks>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._zoomMode">
            <summary>
            Gets or sets a value that indicates whether zoom behavior in the ScrollViewer content is enabled.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._minZoomFactor">
            <summary>
            Gets or sets a value that indicates the minimum permitted run-time value of <see cref="P:C1.WPF.Core.C1ScrollViewer.ZoomFactor"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._maxZoomFactor">
            <summary>
            Gets or sets a value that indicates the maximum permitted run-time value of <see cref="P:C1.WPF.Core.C1ScrollViewer.ZoomFactor"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.HorizontalOffset">
            <summary>
            Gets the distance the content has been scrolled horizontally.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.VerticalOffset">
            <summary>
            Gets the distance the content has been scrolled vertically.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ZoomFactor">
            <summary>
            Gets a value that indicates the current zoom factor engaged for content scaling.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ViewportHeight">
            <summary>
            Gets the vertical size of the viewable content.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewable content.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ExtentWidth">
            <summary>
            Gets the horizontal size of all the scrollable content in the <see cref="T:C1.WPF.Core.C1ScrollViewer"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ExtentHeight">
            <summary>
            Gets the vertical size of all the scrollable content in the <see cref="T:C1.WPF.Core.C1ScrollViewer"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ScrollableWidth">
            <summary>
            Gets a value that represents the horizontal size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ScrollableHeight">
            <summary>
            Gets a value that represents the vertical size of the area that can be scrolled; the difference between the height of the extent and the height of the viewport.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollViewer.Scroll">
            <summary>
            Occurs a scroll change is occurring.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollViewer.ViewChanging">
            <summary>
            Occurs when manipulations such as scrolling and zooming cause the view to change.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollViewer.ViewChanged">
            <summary>
            Occurs when manipulations such as scrolling and zooming have caused the view to change.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnScroll(C1.WPF.Core.C1ScrollViewerScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Scroll" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.WPF.Core.C1ScrollViewerScrollEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnViewChanging(C1.WPF.Core.C1ScrollViewerViewChangingEventArgs)">
            <summary>
            Raises the <see cref="E:ViewChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.WPF.Core.C1ScrollViewerViewChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnViewChanged(C1.WPF.Core.C1ScrollViewerViewChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ViewChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.WPF.Core.C1ScrollViewerViewChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Changes the view.
            </summary>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
            <param name="zoomFactor">The zoom factor.</param>
            <param name="disableAnimation">if set to <c>true</c> [disable animation].</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.ScrollIntoView(System.Windows.Rect,System.Boolean)">
            <summary>
            Scrolls the grid to bring a specified range into view.
            </summary>
            <param name="rect">The region that needs to be brought into view (relative to the content).</param>
            <param name="disableAnimation">if set to <c>true</c> disable animations.</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.GetThumbPosition(System.Windows.Controls.Primitives.ScrollBar)">
            <summary>
            Get the position of the Thumb relative to the ScrollBar
            </summary>
            <param name="scrollBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer._scrollTipStyle">
            <summary>
            Gets or set the style of the tooltip
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollViewer.ToolTipShown">
            <summary>
            Define the ToolTipShown event
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnToolTipShown(System.Windows.Controls.Primitives.ScrollBar)">
            <summary>
            Raises the ToolTipShown event, determining the appropriate tooltip position 
            based on user-defined input or scrollbar movement.
            </summary>
            <param name="scrollBar">Event arguments containing the scroll bar raising the event.</param>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnCreateAutomationPeer">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollViewer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.TopLeftHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.TopLeftHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.TopLeftHeader">
            <summary>
            Gets or sets the content of the top-left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.TopHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.TopHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.TopHeader">
            <summary>
            Gets or sets the content of the top header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.TopRightHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.TopRightHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.TopRightHeader">
            <summary>
            Gets or sets the content of the top right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.RightHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.RightHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.RightHeader">
            <summary>
            Gets or sets the content of the right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.BottomRightHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.BottomRightHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.BottomRightHeader">
            <summary>
            Gets or sets the content of the bottom right header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.LeftHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.LeftHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.LeftHeader">
            <summary>
            Gets or sets the content of the left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.BottomHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.BottomHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.BottomHeader">
            <summary>
            Gets or sets the content of the bottom header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.BottomLeftHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.BottomLeftHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.BottomLeftHeader">
            <summary>
            Gets or sets the content of the bottom-left header.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.HorizontalSmallChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.HorizontalSmallChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.HorizontalSmallChange">
            <summary>
            Gets or sets how long the content is scrolled horizontally when pressing scrollbar buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.VerticalSmallChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.VerticalSmallChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.VerticalSmallChange">
            <summary>
            Gets or sets how long the content is scrolled vertically when pressing scrollbar buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.BringIntoViewOnFocusChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.BringIntoViewOnFocusChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.BringIntoViewOnFocusChange">
            <summary>
            Gets or sets a value that determines whether the <see cref="T:C1.WPF.Core.C1ScrollViewer" /> uses a bring-into-view scroll behavior when an item in the view gets focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.EmptyBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.EmptyBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.EmptyBackground">
            <summary>
            Gets or sets a brush that describes the background of an empty space in the corner between the vertical and horizontal scrollbars.
            </summary>
            <remarks>
                This empty space is only visible when both the vertical and horizontal scrollbars are visible.
                </remarks>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.ZoomMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ZoomMode">
            <summary>
            Gets or sets a value that indicates whether zoom behavior in the ScrollViewer content is enabled.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.MinZoomFactorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.MinZoomFactor"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.MinZoomFactor">
            <summary>
            Gets or sets a value that indicates the minimum permitted run-time value of <see cref="P:C1.WPF.Core.C1ScrollViewer.ZoomFactor" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.MaxZoomFactorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.MaxZoomFactor"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.MaxZoomFactor">
            <summary>
            Gets or sets a value that indicates the maximum permitted run-time value of <see cref="P:C1.WPF.Core.C1ScrollViewer.ZoomFactor" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ScrollViewer.ScrollTipStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ScrollViewer.ScrollTipStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewer.ScrollTipStyle">
            <summary>
            Gets or set the style of the tooltip
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ZoomMode">
            <summary>
            Defines constants that specify the current mode for zoom behavior.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ZoomMode.Disabled">
            <summary>
            Zoom of content is disabled.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.ZoomMode.Enabled">
            <summary>
            Zoom of content is enabled.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewerScrollEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.Scroll"/> event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewerScrollEventArgs.NextView">
            <summary>
            Gets the view that the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> will show next.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewerViewChangingEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.ViewChanging"/> event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewerViewChangingEventArgs.NextView">
            <summary>
            Gets the view that the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> will show next.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewerViewChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.ViewChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewerSizeChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.SizeChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollViewerView">
            <summary>
            Provides a view for a <see cref="T:C1.WPF.Core.C1ScrollViewer"/> when its view is changing.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewerView.HorizontalOffset">
            <summary>
            Gets the distance the content has been scrolled horizontally.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewerView.VerticalOffset">
            <summary>
            Gets the distance the content has been scrolled vertically.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollViewerView.ZoomFactor">
            <summary>
            Gets a value that indicates the current zoom factor engaged for content scaling.
            </summary>
            <value>
            The current zoom factor engaged for content scaling. The default is 1.0, where 1.0 indicates no additional scaling.
            </value>
        </member>
        <member name="T:C1.WPF.Core.IScrollViewerLargeScrolling">
            <summary>
            This interface is designed to be used in custom panels that support large dimensions.
            </summary>
            <remarks>When this interface is implemented, <see cref="T:C1.WPF.Core.C1ScrollViewer"/> will account for the invisible area 
            and set <see cref="P:Offset"/> property in the custom panel, the panel must take this position and 
            lay out its children relatively from it. This way the position of its elements will be closer to zero 
            and will avoid rendering issues with large positions.</remarks>
        </member>
        <member name="P:C1.WPF.Core.IScrollViewerLargeScrolling.ExtentWidth">
            <summary>
            Gets the width of the element.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.IScrollViewerLargeScrolling.ExtentHeight">
            <summary>
            Gets the height of the element.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.IScrollViewerLargeScrolling.Offset">
            <summary>
            Gets or sets how much the <see cref="T:C1.WPF.Core.C1ScrollViewer"/> displaced the element.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ScrollViewerScrollBar">
            <summary>
            ScrollBar of <see cref="T:C1.WPF.Core.C1ScrollViewer"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollViewerScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.ScrollViewerScrollBar"/> class.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerScrollBar.CanMinimize">
            <summary>
            Gets or sets whether the scrollbar can be minimized (overlay mode).
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerScrollBar.IsMinimized">
            <summary>
            Gets whether the scrollbar is minimized.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollViewerScrollBar.IsMaximized">
            <summary>
            Gets whether the scrollbar is maximized.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.ScrollViewerScrollBar.Minimized">
            <summary>
            Called when the scrollbar is minimized.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.ScrollViewerScrollBar.Maximized">
            <summary>
            Called when the scrollbar is maximized.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.ScrollToolTipEventArgs">
            <summary>
            Base EventArgs for ToolTipShown event
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollToolTipEventArgs.Content">
            <summary>
            Gets or sets the content value of the Scroll ToolTip Pop Up. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollToolTipEventArgs.Orientation">
            <summary>
            Gets the scroll bar orientation that raised the Scroll event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ScrollToolTipEventArgs.PopUpPosition">
            <summary>
            Gets or sets the position where the end user wants to display the ScrollBar tooltip.
            If not set, it defaults to the position of the ScrollBar thumb.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ScrollToolTipEventArgs.#ctor(System.Object,System.Func{System.Windows.Point},System.Windows.Controls.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.ScrollToolTipEventArgs"/> class with the specified content, 
            tooltip position, and scroll orientation.
            </summary>
            <param name="content">Gets or sets the content value of the Scroll ToolTip Pop Up.</param>
            <param name="popUpPositionFunc">Function that gets the position where the ScrollBar tooltip will be shown.</param>
            <param name="scrollOrientation">Gets the scroll bar orientation that raised the Scroll event.</param>
        </member>
        <member name="T:C1.WPF.Core.C1StyleSelector">
            <summary>
            Provides a way to apply styles based on custom logic.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1StyleSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ToggleButton">
            <summary>
            Represents a button that a user can expand and collapse.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._borderAlignment">
            <summary>
            Gets or sets the alignment of the border.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._mouseOverBrush">
            <summary>
            Gets or sets the brush to highlight the element when the mouse is over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._pressedBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._checkedBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._checkedBackground">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._checkedForeground">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._focusBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._cornerRadius">
            <summary>
            Gets or sets the corners radius of the button.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._checkedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._uncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton._indeterminateContent">
            <summary>
            Gets or sets the content shown when the button is indeterminate.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ToggleButton.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ToggleButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ToggleButton.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1ToggleButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.BorderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.BorderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.BorderAlignment">
            <summary>
            Gets or sets the alignment of the border.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.MouseOverBrush">
            <summary>
            Gets or sets the brush to highlight the element when the mouse is over.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.PressedBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.CheckedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.CheckedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.CheckedBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.CheckedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.CheckedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.CheckedBackground">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.CheckedForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.CheckedForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.CheckedForeground">
            <summary>
            Gets or sets the brush to highlight the element when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.FocusBrush">
            <summary>
            Gets or sets the brush to highlight the element when the button is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.CornerRadius">
            <summary>
            Gets or sets the corners radius of the button.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.CheckedContentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.CheckedContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.CheckedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.UncheckedContentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.UncheckedContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.UncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1ToggleButton.IndeterminateContentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1ToggleButton.IndeterminateContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ToggleButton.IndeterminateContent">
            <summary>
            Gets or sets the content shown when the button is indeterminate.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1View">
            <summary>
            Base class for views supporting standard properties.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1View._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Core.C1View.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnBackgroundChanged">
            <summary>
            Called when the background changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnForegroundChanged">
            <summary>
            Called when the foreground changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnBorderBrushChanged">
            <summary>
            Called when the border brush changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnBorderThicknessChanged">
            <summary>
            Called when the border thickness changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnCornerRadiusChanged">
            <summary>
            Called when the corner-radius changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnPaddingChanged">
            <summary>
            Called when the padding changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnFontChanged">
            <summary>
            Called when any of the font properties changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnFlowDirectionChanged">
            <summary>
            Called when the flow direction changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnStyleChanged">
            <summary>
            Called when the style changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1View"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Core.C1View"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Core.C1View.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1View.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.C1View.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Core.C1View.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Core.C1View.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1View.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:System.Windows.CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DefaultValueConverter">
            <summary>
            Converts a value into a specified type.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DefaultValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.DefaultValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Core.DefaultValueConverter.GetFormattedString(System.Object,System.String)">
            <summary>
            Formats the value parameter using the specified format. 
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format specifier.</param>
            <returns>Formatted string if value is <see cref="T:System.IFormattable"/>, or value.ToString() otherwise.</returns>
        </member>
        <member name="T:C1.WPF.Core.DelegateConverter">
            <summary>
            Converters values using the specified delegates.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.#ctor(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.DelegateConverter"/> class.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = DelegateConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = DelegateConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = DelegateConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.Create(System.Func{System.Object,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function.</param>
            <example>
            <code>
            var converter = DelegateConverter.Create((value)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.DelegateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:C1.WPF.Core.DoubleArrayTypeConverter">
            <summary>
            Converts a string into an array of <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DoubleArrayTypeConverter.Parse(System.String)">
            <summary>
            Parses a string and convert it to an array of double.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.OrientationConverter">
            <summary>
            Converts an <see cref="T:System.Windows.Controls.Orientation"/> value to a <see cref="T:System.Windows.Media.RotateTransform"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.OrientationConverter.Opposite">
            <summary>
            If true, the rotation will be performed the other way round.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.PointArrayTypeConverter">
            <summary>
            Converts a string into an array of <see cref="T:System.Windows.Point"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.PointArrayTypeConverter.Parse(System.String)">
            <summary>
            Parses a string and convert it to an array of points.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.VisibilityConverter">
            <summary>
            Converter from/to Visibility and Boolean.
            </summary>
            <remarks>
            true = Visible
            false = Collapsed
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.VisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.VisibilityConverter"/> class.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.VisibilityConverter.Opposite">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.Core.VisibilityConverter"/> is opposite.
            </summary>
            <value><c>true</c> if opposite; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.WPF.Core.C1SideThicknessConverter">
            <summary>
            Converter used to bind specific sides of inner elements thickness to 
            the main control thickness.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.AsyncEventArgs">
            <summary>
            Provides event data for asynchronous events.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.AsyncEventArgs.Awaiter">
            <summary>
            Gets the deferrals awaiter.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the complete method.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgs.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.AsyncEventArgsDeferralsAwaiter">
            <summary>
            Deferrals awaiter used to wait for the deferrals of an async event.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgsDeferralsAwaiter.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the Complete method.
            </remarks>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgsDeferralsAwaiter.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.AsyncEventArgsDeferral">
            <summary>
            Deferral used to block the event until <see cref="M:C1.WPF.Core.AsyncEventArgsDeferral.Complete(System.Exception)"/> method is called. 
            </summary>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgsDeferral.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.AsyncEventArgsDeferral"/> class.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.AsyncEventArgsDeferral.CancellationToken">
            <summary>
            Gets the cancellation token passed by the event raiser.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.AsyncEventArgsDeferral.Complete(System.Exception)">
            <summary>
            Notifies the event the handler is ready to continue.
            </summary>
            <param name="exc">The exception in case the handler completed with an error.</param>
        </member>
        <member name="M:C1.WPF.Core.BindingEx.Execute``1(System.Windows.Data.Binding,System.Object)">
            <summary>
            Simulates the evaluation of a binding using reflection.
            </summary>
            <param name="binding">The binding.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="F:C1.WPF.Core.BindingEx._bindingMarker">
            <summary>
            Identifies our own bindings.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.BindingEx.SetBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.BindingMode,System.Windows.Data.IValueConverter,System.Boolean)">
            <summary>
            Sets the binding.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.BrushEx">
            <summary>
            Provides access to brushes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.BrushEx.Cascade(System.Func{System.Windows.Media.Brush}[])">
            <summary>
            Returns the first color different from the default.
            </summary>
            <param name="colors">The list of colors to look up.</param>
        </member>
        <member name="M:C1.WPF.Core.BrushEx.Blend(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">The color to blend onto the <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            ?on top of? <paramref name="backgroundColor"/>.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.ColorEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.IsDefaultColor(System.Nullable{System.Windows.Media.Color})">
            <summary>
            Determines whether the specified color is the default color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.Cascade(System.Func{System.Nullable{System.Windows.Media.Color}}[])">
            <summary>
            Returns the first color different from the default.
            </summary>
            <param name="colors">The list of colors to look up.</param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="a">The alpha channel.</param>
            <param name="r">The Red component.</param>
            <param name="g">The Green component.</param>
            <param name="b">The Blue component.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.GetArgb(System.Windows.Media.Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Gets the ARGB components of a color.
            </summary>
            <param name="color">The color.</param>
            <param name="a">The alpha channel.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.WithAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Creates a new color modifying the alpha channel.
            </summary>
            <param name="color">The color.</param>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.Blend(System.Windows.Media.Color,System.Windows.Media.Color,System.Double,System.Boolean)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">The color to blend onto the <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            �on top of� <paramref name="backgroundColor"/>.</param>
            <param name="blendAlpha">If true, the alpha channel will be also blended.</param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.BlendWithAlpha(System.Windows.Media.Color,System.Nullable{System.Windows.Media.Color})">
            <summary>
            Alpha blends the specified colors together.
            </summary>
            <param name="color">The color that stands in the front of <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The color that stands in the back.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.ToArgb(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to a int value.
            </summary>
            <param name="clr">Color object</param>
            <returns>A int value that indicated the color</returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.RGBtoHSV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.HSVtoRGB(System.Single@,System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.GetIntColor(System.Object)">
            <summary>
            Convert color in platforms to a int color.
            </summary>
            <param name="color">Color in each platform.</param>
            <returns>a color defined in a int value.</returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.TryParse(System.String,System.Windows.Media.Color@)">
            <summary>
            Creates a color from an html string.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.TryParse(System.String,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Creates a color from an html string.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.AreColorsEqual(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Returns true if two colors are equal.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.IsVisible(System.Windows.Media.Color)">
            <summary>
            Returns a value indicating whether specified Color value represents
            some "visible" value, for example, this function returns <b>false</b> for
            transparent color.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.ToDrawingColor(System.Windows.Media.Color)">
            <summary>
            Media Color to Drawing Color
            </summary>
            <param name="mediaColor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.ToMediaColor(System.Drawing.Color)">
            <summary>
            Drawing Color to Media Color
            </summary>
            <param name="drawingColor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.FromOle(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has BBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.ColorEx.FromOleAlpha(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has AABBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.DesignTimeEx">
            <summary>
            DesignTime extensions
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DeviceEx">
            <summary>
            Provides information about the device
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.RuntimePlatform">
            <summary>
            Gets the runtime platform.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.DeviceOrientation">
            <summary>
            Gets the device orientation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.ScreenDensity">
            <summary>
            Gets the screen density.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.ScreenDensityCommon">
            <summary>
            Gets the screen density.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.DeviceEx.ScreenPPI">
            <summary>
            Gets the number of pixels per inch of the screen.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DeviceType">
            <summary>
            Indicates which device type the forms are running on.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceType.Phone">
            <summary>
            Indicates that the device is a phone.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceType.Desktop">
            <summary>
            Indicates that the device is desktop.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceType.Other">
            <summary>
            Indicates the type of device is unknown.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DeviceOrientation">
            <summary>
            Indicates device Orientation.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceOrientation.Undefined">
            <summary>
            Indicates device Orientation is Undefined.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceOrientation.Landscape">
            <summary>
            Indicates device Orientation is Landscape.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.DeviceOrientation.Portrait">
            <summary>
            Indicates device Orientation is Portrait.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DispatcherEx.C1BeginInvoke(System.Windows.FrameworkElement,System.Action)">
            <summary>
            [Platform safe] Invokes the begin invoke accessing the Dispatcher of the framework element.
            </summary>
            <param name="elem">The elem.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:C1.WPF.Core.DoubleEx.EqualsOrBothNanOrInfinity(System.Double,System.Double)">
            <summary>
            Returns true when both numbers are equal or both are Nan or both are PositiveInfinity or both are NegativeInfinity.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:C1.WPF.Core.PathContext.ArcTo(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Adds an arc to the path.
            </summary>
            <param name="oval">The rectangle that determines the full-circle.</param>
            <param name="startAngle">The starting angle that determines where the curve starts</param>
            <param name="sweepAngle">The sweep angle that determines the curve end point.</param>
        </member>
        <member name="M:C1.WPF.Core.ExpressionEx.CreateBindingFunction(System.Type,System.String)">
            <summary>
            Creates a compiled function to access the property specified by the <paramref name="bindingPath"/> of the <paramref name="itemType"/>.
            </summary>
            <param name="itemType">The type of the items.</param>
            <param name="bindingPath">The property path</param>
        </member>
        <member name="T:C1.WPF.Core.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Extensions.GetAbsoluteUri(System.String)">
            <summary>
            Returns the absolute <see cref="T:System.Uri"/> from a string that may represent relative or absolute Uri.
            </summary>
            <param name="uriString">A relative or absolute Uri in string form.</param>
            <returns>The absolute <see cref="T:System.Uri"/> from the parameter string.</returns>
        </member>
        <member name="M:C1.WPF.Core.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix@,System.Windows.Media.Matrix@)">
            <summary>
            Multiplies the left matrix by the right matrix,
            returns the resulting matrix in the output parameter.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <param name="result">The product of multiplying the two matrices.</param>
        </member>
        <member name="M:C1.WPF.Core.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <returns>The product of multiplying the two matrices.</returns>
        </member>
        <member name="M:C1.WPF.Core.Extensions.Transform(System.Windows.Media.Matrix,System.Double,System.Double)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="matrix">The Matrix defining transformation.</param>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>The result of the transformation for the point.</returns>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.C1GetLogicalFocusedElement(System.Windows.FrameworkElement)">
            <summary>
            [Platform safe] Returns a logical focused element from a focus scope where the specified
            <paramref name="relativeToElement"/> is in.
            </summary>
            <param name="relativeToElement"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.GetKeyboardFocusedElement">
            <summary>
            [Platform safe] Returns an element with a keyboard focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.BindInputMethodProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Propagates InputMethod attached properties from the source to the element.
            </summary>
            <param name="element"></param>
            <param name="source"></param>
            <remarks>Use it in editor controls to propagate properties from the control to the included text boxes.</remarks>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.GetParentsPopup(System.Windows.FrameworkElement)">
            <summary>
            Includes the argument (if not null)
            When it finds an open Popup that has a parent it traverses up through the parent, not adding the popup to the list
            </summary>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.IsInVisualTree(System.Windows.FrameworkElement)">
            <summary>
            [Platform safe] Determines whether the specified element is in visual tree.
            </summary>
            <param name="elem">The framework element.</param>
            <returns>
            	<c>true</c> if the specified element is in visual tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.RemoveFromParent(System.Windows.FrameworkElement)">
            <summary>
            Removes the element from its parent
            </summary>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.InvalidateVisualTree(System.Windows.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.WPF.Core.FrameworkElementEx.InvalidateVisualTree(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
            <param name="from">The source.</param>
        </member>
        <member name="T:C1.WPF.Core.IEnumerableEx">
            <summary>
            Provides convenience method for working with LINQ and enumerables
            </summary>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for each collection item
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">enumeration to process</param>
            <param name="action">action to perform</param>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum number in the sequence or default if not items in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Returns the maximum number in the sequence or default if not items in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns the maximum number in the sequence or default if not items in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.MaxSize(System.Collections.Generic.IEnumerable{System.Windows.Size})">
            <summary>
            Returns the maximum size computing width and height of the sequence.
            </summary>
            <param name="sizes">The sequence of sizes.</param>
        </member>
        <member name="M:C1.WPF.Core.IEnumerableEx.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Determines whether the specified list contains any of the following values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
            <returns>
            	<c>true</c> if the specified list contains any; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:C1.WPF.Core.C1LineBreakMode">
            <summary>
            Describe the way the text is shown in labels in space constrained scenarios.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LineBreakMode.NoWrap">
            <summary>
            The text is clipped.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LineBreakMode.WordWrap">
            <summary>
            The text is wrapped in as many lines as necessary.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1LineBreakMode.TailTruncation">
            <summary>
            The tail is truncated.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.WPF.Core.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0,System.Windows.Data.IValueConverter,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
            <param name="converter">Converter to use when setting the property.</param>
            <param name="converterParameter">Parameter passed to the converter.</param>
            <param name="culture">Culture information to use when converting values.</param>
        </member>
        <member name="M:C1.WPF.Core.PointEx.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the two points
            </summary>
            <param name="p1">One point.</param>
            <param name="p2">Another point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.RectEx.Deflate(System.Windows.Rect@,System.Windows.Thickness)">
            <summary>
            Deflates a <see cref="T:System.Windows.Rect"/> structure by specified amount.
            </summary>
            <param name="rect"><see cref="T:System.Windows.Rect"/> structure.</param>
            <param name="th"><see cref="T:System.Windows.Thickness"/> structure defining amount to inflate this <see cref="T:System.Windows.Rect"/>.</param>
        </member>
        <member name="M:C1.WPF.Core.RectEx.Union(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns a new rectangle exactly enough to contain the specified rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.RectEx.Intersection(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns a new rectangle with the intersection to the specified rectangle.
            </summary>
            <param name="rect1">The rectangle to intersect to</param>
            <param name="rect2">The rectangle to intersect.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.StringEx.SplitCamel(System.String,System.Boolean)">
            <summary>
            Insert spaces between words identified by the camel nomenclature.
            </summary>
            <param name="s">The original string.</param>
            <param name="capitalizeFirst">When set to true the resulting string will have its first word capitalized despite the original string capitalization.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.ThemeEx">
            <summary>
            Provides access to system brushes according to the current theme.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.IsDark">
            <summary>
            Gets a value indicating whether the app is using a dark theme.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.BackgroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme background.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.ForegroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme foreground.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.AccentBackground">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> accent background.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.AccentForeground">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> accent foreground.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.SelectionBackgroundBrush">
            <summary>
            Gets the selection background.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.SelectionForegroundBrush">
            <summary>
            Gets the selection foreground.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.CursorBackgroundBrush">
            <summary>
            Gets the cursor background.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.CursorForegroundBrush">
            <summary>
            Gets the cursor foreground.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.EditorBackgroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme used to pain the background of the editors.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.EditorForegroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme used to pain the foreground of the editors.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.HeaderBackgroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme used to pain the headers.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.HeaderForegroundBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme used to pain the headers foreground.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.ThemeEx.BorderBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the theme used to pain the borders.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.TypeEx">
            <summary>
            The <see cref="T:C1.WPF.Core.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsDate(System.Type)">
            <summary>
            Returns true if the type is any of the date data types:
            DateTime, DateTimeOffset and DateOnly.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is date.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsTime(System.Type)">
            <summary>
            Returns true if the type is any of the time data types:
            DateTime, DateTimeOffset, TimeOnly, and TimeSpan.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is time.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsDateTime(System.Type)">
            <summary>
            Returns true if the type is any of the date or time data types:
            DateTime, DateTimeOffset, DateOnly, TimeOnly, and TimeSpan.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is date or time.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.IsDateAndTime(System.Type)">
            <summary>
            Returns true if the type is any of the date or time data types:
            DateTime, DateTimeOffset, DateOnly, TimeOnly, and TimeSpan.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is date or time.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetMinValue(System.Type)">
            <summary>
            Gets the MinValue of a type.
            </summary>
            <param name="type">Type.</param>
            <returns>Double.NaN if the MinValue property doesn't exist, a specific double value if property exists.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetMaxValue(System.Type)">
            <summary>
            Gets the MaxValue of a type.
            </summary>
            <param name="type">Type.</param>
            <returns>Double.NaN if the MinValue property doesn't exist, a specific double value if property exists.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Returns the Xml documentation summary comment for this member
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetDocumentation(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.GetSummary(System.Type)">
            <summary>
            Gets the summary portion of a type's documentation or returns an empty string if not available
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.XmlFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:C1.WPF.Core.TypeEx.Cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.XmlFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:C1.WPF.Core.TypeEx.XmlFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="M:C1.WPF.Core.UriEx.GetAbsoluteUri(System.String)">
            <summary>
            Returns the absolute <see cref="T:System.Uri"/> from a string that may represent relative or absolute Uri.
            </summary>
            <param name="uriString">A relative or absolute Uri in string form.</param>
            <returns>The absolute <see cref="T:System.Uri"/> from the parameter string.</returns>
        </member>
        <member name="T:C1.WPF.Core.ViewEx">
            <summary>
            View extensions
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ViewEx.GetChildren(System.Windows.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            Finds all the children of a given <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ViewEx.GetChildren``1(System.Windows.FrameworkElement)">
            <summary>
            Finds all the children of a given type for a particular FrameworkElement
            </summary>
        </member>
        <member name="M:C1.WPF.Core.ViewEx.GetAllParents(System.Windows.FrameworkElement)">
            <summary>
            Returns all the parents in the visual tree
            </summary>
            <returns>The list of ancestor framework elements in the visual tree hierarchy</returns>
        </member>
        <member name="M:C1.WPF.Core.ViewEx.GetVisibleRect(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Gets the clipping bounds relatively to the element position.
            </summary>
            <param name="element">The queried element.</param>
            <param name="stopView">Optional view to stop computing when reaching this parent.</param>
            <param name="useLayoutRounding">When set to true will consider the property UseLayoutRounding property of the elements to compute the clip-bounds.</param>
        </member>
        <member name="M:C1.WPF.Core.ViewEx.SetStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets <see cref="T:System.Windows.Style"/> to the specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="view">Affected <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <param name="style"><see cref="T:System.Windows.Style"/> to set.</param>
        </member>
        <member name="M:C1.WPF.Core.VisualStateManagerEx.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)">
            <summary>
            Tries to go to a new state and throws a friendly error message
            </summary>
            <param name="control">Control that is going to change the state.</param>
            <param name="stateName">Name of the state.</param>
            <param name="useTransitions">Use transitions or not.</param>
        </member>
        <member name="M:C1.WPF.Core.XamlReaderEx.Parse``1(System.String)">
            <summary>
            Parses a well-formed XAML fragment and creates a corresponding object tree, and returns the root of the object tree.
            </summary>
            <typeparam name="T">The type of the object to be parsed.</typeparam>
            <param name="strXaml">String that contains a valid XAML fragment.</param>
            <returns>The root object of the parsed object tree.</returns>
        </member>
        <member name="T:C1.WPF.Core.C1DragHelper">
            <summary>
            Cross-platform helper for listening to drag gestures supporting inertia.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragHelper.#ctor(System.Windows.FrameworkElement,C1.WPF.Core.C1DragHelperMode,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1DragHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the drag gesture will be listened.</param>
            <param name="mode">Indicates the sort of drag to be listened. Combine inertia flag with other flags so that DragDelta events are raised after the manipulation finish. i.e. C1DragHelperMode.FreeDrag | C1DragHelperMode.Inertia</param>
            <param name="initialThreshold">Specifies the number of pixels the gesture will have to pass in order to start. if 0 is set the gesture will start on pointer down, and captureElementOnPointerPressed will be true despite the specified parameter, otherwise the gesture will start on mouse move, default value is 1</param>
            <param name="captureElementOnPointerPressed">Indicates whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WINUI) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WINUI). If initialThreshold is 0 this parameter will be ignored.<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks></param>
            <param name="handledEventsToo">Indicates whether drag gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise it will use Pointer events.</param>
            <param name="useRightButton">if set to <c>true</c> it will listen to mouse right button down/up events instead of left button events(In WINUI it only applies if useManipulationEvents is set to false).</param>
            <param name="startByHolding">if set to <c>true</c> the drag action will be initiated by a hold operation .</param>
        </member>
        <member name="E:C1.WPF.Core.C1DragHelper.DragPreview">
            <summary>
            Occurs before a drag gesture starts giving the user the opportunity to configure the kind of gesture that will be listened based on the point where the manipulation started.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragHelper.DragStarted">
            <summary>
            Occurs when a drag gesture started.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragHelper.DragDelta">
            <summary>
            Occurs while a drag gesture is performed.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragHelper.DragCompleted">
            <summary>
            Occurs after a drag gesture completed.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1DragHelper.DragInertiaStarted">
            <summary>
            Occurs when the inertia is about to start.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragHelper.Complete">
            <summary>
            Finalizes drag gesture.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragEventArgs">
            <summary>
            Contains information of the drag events.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragEventArgs.DragHelper">
            <summary>
            Gets a reference to the <see cref="T:C1.WPF.Core.C1DragHelper"/> that originated the event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragPreviewEventArgs">
            <summary>
            Contains information of the DragStarting event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.StartByHolding">
            <summary>
            Gets or sets a value indicating whether drag will be initiated by a hold operation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.Mode">
            <summary>
            Gets or sets the mode indicating the sort of drag to be listened.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.CaptureElementOnPointerPressed">
            <summary>
            Gets or sets a value indicating whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WINUI) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WINUI).<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks>
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.InitialThreshold">
            <summary>
            Gets or sets the number of pixels the gesture will have to pass in order to start.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the recognition of this gesture is canceled.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragPreviewEventArgs.Origin">
            <summary>
            Gets the position of original touch point.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragStartedEventArgs">
            <summary>
            Contains information of the DragStarted event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragStartedEventArgs.Origin">
            <summary>
            Gets the absolute point where the gesture started.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragStartedEventArgs.Direction">
            <summary>
            Gets the initial direction of the drag gesture.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragDeltaEventArgs">
            <summary>
            Contains information of the DragDelta event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDeltaEventArgs.IsInertial">
            <summary>
            Gets a value indicating whether this event is raised because of a direct manipulation or is inertial.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragDeltaEventArgs.Velocities">
            <summary>
            Gets the velocity of the inertia.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1DragDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragInertiaStartedEventArgs">
            <summary>
            Contains information of the DragInertiaStarted event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragInertiaStartedEventArgs.Velocity">
            <summary>
            Gets the velocity of the gesture before the inertia started.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragInertiaStartedEventArgs.DesiredDeceleration">
            <summary>
            Gets or sets the deceleration of the drag inertia (pixels by millisecond)
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragCompletedEventArgs">
            <summary>
            Contains information of the DragCompleted event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1DragCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether the drag gesture was cancelled.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1DragHelperMode">
            <summary>
            Determines the kind of drag gesture that will be listened.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.TranslateX">
            <summary>
            The drag will be performed only considering x coordinates.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.TranslateY">
            <summary>
            The drag will be performed only considering y coordinates.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.TranslateXY">
            <summary>
            Both x and y coordinates will be considered in the gesture.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.Inertia">
            <summary>
            Apply inertia when drag finish.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.TranslateRailX">
            <summary>
            The drag will be performed in the x coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1DragHelperMode.TranslateRailY">
            <summary>
            The drag will be performed in the y coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1HoverHelper">
            <summary>
            Cross-platform helper for listening to pointer hovering events.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1HoverHelper.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1HoverHelper"/> class.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the tap gestures will be listened.</param>
        </member>
        <member name="M:C1.WPF.Core.C1HoverHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1HoverHelper.PointerEntered">
            <summary>
            Occurs when the pointer enters the bounds of the element.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1HoverHelper.PointerMoved">
            <summary>
            Occurs when the pointer moves over the bounds of the element.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1HoverHelper.PointerExited">
            <summary>
            Occurs when the pointer exited the bounds of the element.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1InputEventArgs">
            <summary>
            Contains information about gesture events.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.#ctor(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.#ctor(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs,C1.WPF.Core.C1PointerDeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="pointerType">Type of the pointer.</param>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.#ctor(System.Windows.RoutedEventArgs,C1.WPF.Core.C1PointerDeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="pointerType">Type of the pointer.</param>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs">
            <summary>
            Gets the arguments of the original event which raised this event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.PointerDeviceType">
            <summary>
            Gets the type of pointer which performed the action.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.IsShiftPressed">
            <summary>
            Gets whether shift key is pressed.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.IsCtrlPressed">
            <summary>
            Gets whether ctrl key is pressed.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1InputEventArgs.IsCommandPressed">
            <summary>
            Gets whether command key is pressed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.GetPosition(System.Windows.FrameworkElement)">
            <summary>
            Gets the position of the pointer performing the drag gesture relatively to the specified element.
            </summary>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.GetPosition(System.Windows.RoutedEventArgs,System.Windows.FrameworkElement)">
            <summary>
            Gets the position of the pointer or finger.
            </summary>
            <param name="args">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs" /> instance containing the manipulation data.</param>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.GetPointerType(System.Windows.RoutedEventArgs)">
            <summary>
            Gets the type of the pointer.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.GetIsHandled(System.Windows.RoutedEventArgs)">
            <summary>
            Gets a value indicating whether the specified event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.SetIsHandled(System.Windows.RoutedEventArgs,System.Boolean)">
            <summary>
            Sets whether the event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.WPF.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="handled"><c>true</c> if the event is handled.</param>
        </member>
        <member name="M:C1.WPF.Core.C1InputEventArgs.HitTest``1(System.Double)">
            <summary>
            Returns the first visual element which is hit by this event.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.C1PointerDeviceType">
            <summary>
            Enumerates the different kind of devices which can perform drag operations.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PointerDeviceType.Mouse">
            <summary>
            Mouse device
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PointerDeviceType.Touch">
            <summary>
            Touch screen
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1PointerDeviceType.Pen">
            <summary>
            Pen device
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollHelper">
            <summary>
            Cross-platform helper for listening to scroll gestures using mouse wheel.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1ScrollHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.UIElement"/> on which the zoom gesture will be listened.</param>
            <param name="avoidIfCtrlPressed">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousScroll">If set to true it will raise intermediate events to perform a continuous scroll, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollHelper.ScrollPreview">
            <summary>
            Occurs before a scroll gesture starts giving the user the opportunity to configure the kind of gesture that will be listened based on the point where the manipulation started.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollHelper.ScrollStarted">
            <summary>
            Occurs when a scroll gesture started.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollHelper.ScrollDelta">
            <summary>
            Occurs while a scroll gesture is performed.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ScrollHelper.ScrollCompleted">
            <summary>
            Occurs after a scroll gesture completed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollHelper.FinalizeScroll">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollEventArgs">
            <summary>
            Contains information of the scroll events.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollPreviewEventArgs">
            <summary>
            Contains information of the ScrollPreview event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollPreviewEventArgs.DeltaScroll">
            <summary>
            Gets the delta scroll.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollPreviewEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the recognition of this gesture is canceled.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollStartedEventArgs">
            <summary>
            Contains information of the ScrollStarted event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollDeltaEventArgs">
            <summary>
            Contains information of the ScrollDelta event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollDeltaEventArgs.DeltaScroll">
            <summary>
            Gets the delta scroll.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollDeltaEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ScrollDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ScrollCompletedEventArgs">
            <summary>
            Contains information of the ScrollCompleted event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ScrollCompletedEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1TapHelper">
            <summary>
            Cross-platform helper for listening to tapped and double-tapped events.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1TapHelper.#ctor(System.Windows.FrameworkElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1TapHelper"/> class.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the tap gestures will be listened.</param>
            <param name="handledEventsToo">Indicates whether tap gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="raiseTapOnPointerPressed">Raise the <see cref="E:C1.WPF.Core.C1TapHelper.Tapped"/> event when the mouse or pen is pressed.</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise it will use Pointer events.</param>
        </member>
        <member name="M:C1.WPF.Core.C1TapHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1TapHelper.GetDoubleClickTime">
            <summary>
            Returns the time of the double click.
            </summary>
            <returns></returns>
        </member>
        <member name="E:C1.WPF.Core.C1TapHelper.ManipulationStarted">
            <summary>
            Occurs when one or more fingers get in contact with the screen or mouse button was pressed.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1TapHelper.ManipulationCompleted">
            <summary>
            Occurs when the fingers are lift from the screen or mouse button was released.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1TapHelper.Tapped">
            <summary>
            Occurs when the element is tapped (clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1TapHelper.DoubleTapped">
            <summary>
            Occurs when the element is double-tapped (double-clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1TapHelper.Holding">
            <summary>
            Occurs when a Hold gesture is performed over the element.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1TapHelper.InsideTouchThreshold(C1.WPF.Core.C1PointerDeviceType,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns true if the distance between specified points in less or equal to the tap threshold.
            </summary>
            <param name="deviceType">The kind of device.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.Core.C1TappedEventArgs">
            <summary>
            Contains information of the tap events.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1TappedEventArgs.#ctor(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1TappedEventArgs" /> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
            <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
            <param name="isDown">if set to <c>true</c> the event was performed with the mouse down.</param>
        </member>
        <member name="M:C1.WPF.Core.C1TappedEventArgs.#ctor(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs,C1.WPF.Core.C1PointerDeviceType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.C1TappedEventArgs" /> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
            <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
            <param name="pointerType">the type of event that originated the gesture.</param>
            <param name="isDown">if set to <c>true</c> the event was performed with the mouse down.</param>
        </member>
        <member name="P:C1.WPF.Core.C1TappedEventArgs.IsRightTapped">
            <summary>
            Gets a value indicating whether the event is performed with the right button of the mouse.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1TappedEventArgs.IsDown">
            <summary>
            Gets a value indicating whether the event is performed with the mouse down.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1TappedEventArgs.IsBarrelButtonDown">
            <summary>
            Gets a value indicating whether the barrel button of the pen is pressed.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1SwipeHelper">
            <summary>
            Swipe helper.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1SwipeHelper.Swipe">
            <summary>
            Occurs when a swipe gesture is about to start.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1SwipeHelper.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1SwipeHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the drag gesture will be listened.</param>
        </member>
        <member name="M:C1.WPF.Core.C1SwipeHelper.#ctor(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1SwipeHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the drag gesture will be listened.</param>
            <param name="swipeThreshold">The value in pixels by which the pointer must be moved in a short time to count it as a Swipe.</param>
        </member>
        <member name="M:C1.WPF.Core.C1SwipeHelper.#ctor(System.Windows.FrameworkElement,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1SwipeHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the drag gesture will be listened.</param>
            <param name="swipeThreshold">The value in pixels by which the pointer must be moved in a short time to count it as a Swipe.</param>
            <param name="handledEventsToo">Indicates whether drag gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise it will use Pointer events.</param>
        </member>
        <member name="M:C1.WPF.Core.C1SwipeHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1SwipeDirection">
            <summary>
            Describes the direction of the swipe gesture.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SwipeDirection.Up">
            <summary>
            Upwards swipe.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SwipeDirection.Down">
            <summary>
            Downwards swipe.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SwipeDirection.Left">
            <summary>
            Swipe to the left.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SwipeDirection.Right">
            <summary>
            Swipe to the right.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ZoomHelper">
            <summary>
            Cross-platform helper for listening to zoom gestures either using the mouse or fingers.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ZoomHelper.#ctor(System.Windows.FrameworkElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.WPF.Core.C1ZoomHelper"/>.
            </summary>
            <param name="element">An <see cref="T:System.Windows.FrameworkElement"/> on which the zoom gesture will be listened.</param>
            <param name="ctrlRequired">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousZoom">If set to true it will raise intermediate events to perform a continuous zoom, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.WPF.Core.C1ZoomHelper.ZoomStarted">
            <summary>
            Occurs when a zoom gesture started.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ZoomHelper.ZoomDelta">
            <summary>
            Occurs while a zoom gesture is performed.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.C1ZoomHelper.ZoomCompleted">
            <summary>
            Occurs after a zoom gesture completed.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ZoomHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ZoomEventArgs">
            <summary>
            Contains information of the zoom events.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ZoomStartedEventArgs">
            <summary>
            Contains information of the ZoomStarted event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ZoomDeltaEventArgs">
            <summary>
            Contains information of the ZoomDelta event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.DeltaScale">
            <summary>
            Gets the delta scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.UniformDeltaScale">
            <summary>
            Gets the uniform delta scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1ZoomDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1ZoomCompletedEventArgs">
            <summary>
            Contains information of the ZoomCompleted event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomCompletedEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomCompletedEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.C1ZoomCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.BindingProxy">
            <summary>
            Useful class to overcome limitation in setting a TemplateBinding property in a visual-state animation.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.C1SelectionMode">
            <summary>
            Defines the selection behavior for a control which supports the SelectionMode
            property like C1treeView. 
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SelectionMode.None">
            <summary>
            The user can not select any item.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SelectionMode.Single">
            <summary>
            The user can select only one item at a time. 
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SelectionMode.Multiple">
            <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
        </member>
        <member name="F:C1.WPF.Core.C1SelectionMode.Extended">
            <summary>
            The user can select multiple consecutive items while holding down the corresponding modifier key.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.CancelSourceEventArgs">
            <summary>
            Provides data for a cancelable event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.CancelSourceEventArgs.Source">
            <summary>
            Gets or sets the source of the event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.DelegateCommand">
            <summary>
            Utility class that helps creating an <see cref="T:System.Windows.Input.ICommand"/> from the delegates execute and canExecute.
            </summary>
        </member>
        <member name="E:C1.WPF.Core.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.DelegateCommand"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
        </member>
        <member name="M:C1.WPF.Core.DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.DelegateCommand"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute delegate.</param>
        </member>
        <member name="M:C1.WPF.Core.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.WPF.Core.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:C1.WPF.Core.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="e:CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.PropertyChangedEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.PropertyChangedEventArgs`1.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.PropertyChangedEventArgs`1.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.PropertyChangingEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanging events.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.PropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.Core.PropertyChangingEventArgs`1"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.WPF.Core.Range`1">
            <summary>
            Represents a range of items.
            </summary>
            <typeparam name="T">The range type.</typeparam>
        </member>
        <member name="M:C1.WPF.Core.Range`1.#ctor(`0,`0)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
        </member>
        <member name="P:C1.WPF.Core.Range`1.LowerBound">
            <summary>
            The start of the range.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.Range`1.UpperBound">
            <summary>
            The upper bound of the range.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.Range`1.Length">
            <summary>
            Return length of range
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Contains(`0)">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>true if the range contains <code>value</code>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Contains(C1.WPF.Core.Range{`0})">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.IsContainedBy(C1.WPF.Core.Range{`0})">
            <summary>
            Indicates if the range is contained by <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range is within <code>value</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Overlaps(C1.WPF.Core.Range{`0})">
            <summary>
            Indicates if the range overlaps <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if any of the range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Intersect(C1.WPF.Core.Range{`0})">
            <summary>
            Returns the range that represents the intersection of this range and <code>value</code>.
            </summary>
            <param name="value">The range to intersect with.</param>
            <returns>A range that contains the values that are common in both ranges, or null if there is no intersection.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> does not overlap the range.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Union(C1.WPF.Core.Range{`0})">
            <summary>
            Returns the range that represents the union of this range and <code>value</code>.
            </summary>
            <param name="value">The range to union with.</param>
            <returns>A range that contains both ranges, or null if there is no union.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> is not contiguous with the range.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Complement(C1.WPF.Core.Range{`0})">
            <summary>
            Returns a range which contains the current range, minus <code>value</code>.
            </summary>
            <param name="value">The value to complement the range by.</param>
            <returns>The complemented range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <code>value</code> is contained by this range, complementing would lead to a split range.
            </exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Substract(C1.WPF.Core.Range{`0},System.Func{`0,`0},System.Func{`0,`0})">
            <summary>
            Returns the result of subtracting a range to the current one. This could lead to a split range
            in case the one that is being subtracted is contained in the current one.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Join(C1.WPF.Core.Range{`0},System.Func{`0,`0})">
            <summary>
            Return new range which joined by value with this range
            </summary>
            <param name="value"></param>
            <param name="incrementor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.IsJoinableWith(C1.WPF.Core.Range{`0},System.Func{`0,`0})">
            <summary>
            Check value is join with this range
            </summary>
            <param name="value"></param>
            <param name="incrementor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Split(`0)">
            <summary>
            Splits the range into two.
            </summary>
            <param name="position">The position to split the range at.</param>
            <returns>The split ranges.</returns>
            <exception cref="T:System.ArgumentNullException"><code>position</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>position</code> is not contained within the range.</exception>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Iterate(System.Func{`0,`0})">
            <summary>
            Iterates the range.
            </summary>
            <param name="incrementor">A function which takes a value, and returns the next value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.ReverseIterate(System.Func{`0,`0})">
            <summary>
            Iterates the range in reverse.
            </summary>
            <param name="decrementor">A function which takes a value, and returns the previous value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.IsContiguousWith(C1.WPF.Core.Range{`0})">
            <summary>
            Indicates if this range is contiguous with <code>range</code>.
            </summary>
            <param name="range">The range to check.</param>
            <returns>true if the two ranges are contiguous, false otherwise.</returns>
            <remarks>Contiguous can mean containing, overlapping, or being next to.</remarks>
        </member>
        <member name="M:C1.WPF.Core.Range`1.ToString">
            <summary>
            See <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_Equality(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_Inequality(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the not equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
            <summary>
            Overrides the equals operator.
            </summary>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_GreaterThan(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_LessThan(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_GreaterThan(C1.WPF.Core.Range{`0},`0)">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_LessThan(C1.WPF.Core.Range{`0},`0)">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_GreaterThanOrEqual(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the greater than or equal operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_LessThanOrEqual(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            Overrides the less than or equal to operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_GreaterThanOrEqual(C1.WPF.Core.Range{`0},`0)">
            <summary>
            Overrides the greater than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_LessThanOrEqual(C1.WPF.Core.Range{`0},`0)">
            <summary>
            Overrides the less than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_ExclusiveOr(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            The complement operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The complement of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_BitwiseOr(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            The union operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The union of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.op_BitwiseAnd(C1.WPF.Core.Range{`0},C1.WPF.Core.Range{`0})">
            <summary>
            The intersection operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The intersection of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.WPF.Core.Range`1.CompareTo(C1.WPF.Core.Range{`0})">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.CompareTo(`0)">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.Range`1.CompareTo(System.Object)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.Range`2">
            <summary>
            Represents a range of items, with an associated value.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:C1.WPF.Core.Range`2.#ctor(`0,`0,`1)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:C1.WPF.Core.Range`2.Value">
            <summary>
            The value for the range.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.RangeArray`1">
            <summary>
            Represents a range of array items, with an associated value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:C1.WPF.Core.RangeArray`1.#ctor(System.Int32,`0[])">
            <summary>
            Creates the range.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:C1.WPF.Core.RangeArray`1.Values">
            <summary>
            The values for the range.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.RangeAssert">
            <summary>
            Provides access to assertion functions.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.IsFalse(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is fase.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is true.</exception>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.IsTrue(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is true.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is false.</exception>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotNull(System.String,System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="paramName">The name of the parameter to RangeAssert.</param>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotNull(System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty(System.String,System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty(System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty(System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty``1(``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="values">The values to test.</param>
        </member>
        <member name="M:C1.WPF.Core.RangeAssert.NotEmpty``1(System.String,``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="values">The values to test.</param>
        </member>
        <member name="T:C1.WPF.Core.SelectionChangedEventArgs`1">
            <summary>
            Provides data for the SelectionChanged event.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.SelectionChangedEventArgs`1.#ctor(C1.WPF.Core.IOrderedSet{`0},C1.WPF.Core.IOrderedSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Core.SelectionChangedEventArgs`1"/> class.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
        </member>
        <member name="P:C1.WPF.Core.SelectionChangedEventArgs`1.AddedItems">
            <summary>
            Gets a collection which contains the items that were selected.
            </summary>
            <value>The items that were selected in this event.</value>
        </member>
        <member name="P:C1.WPF.Core.SelectionChangedEventArgs`1.RemovedItems">
            <summary>
            Gets a collection which contains the items that were unselected.
            </summary>
            <value>The items that were unselected in this event.</value>
        </member>
        <member name="T:C1.WPF.Core.SourcedEventArgs">
            <summary>
            Contains data for events with a source different from the object firing the event.
            </summary>
        </member>
        <member name="P:C1.WPF.Core.SourcedEventArgs.Source">
            <summary>
            Gets or sets the source of the event.
            </summary>
        </member>
        <member name="T:C1.WPF.Core.VTreeHelper">
            <summary>
            The <see cref="T:C1.WPF.Core.VTreeHelper"/> class provides utility methods that perform common tasks involving nodes in a visual tree.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetChildOfType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Returns the first child visual object of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <returns>The visual object of the specified type.</returns>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetChildrenOfType(System.Windows.DependencyObject,System.Type,System.Collections.Generic.IList{System.Windows.DependencyObject}@)">
            <summary>
            Returns all children visual objects of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> object to fill with found objects.</param>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.WPF.Core.VTreeHelper.GetFirstParent(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Type},System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the first parent 
            of the visual object which type is one of the specified tyles. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="types">The <see cref="T:System.Collections.Generic.IList`1"/> list of types to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="T:C1.WPF.Core.C1BrushXmlSerializer">
            <summary>
            Provides extension methods for XML serialization and deserialization of <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Core.C1BrushXmlSerializer.WriteBrush(System.Xml.XmlWriter,System.Windows.Media.Brush,System.String)">
            <summary>
            Serializes Brush in XML.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
            <param name="brush">The <see cref="T:System.Windows.Media.Brush"/> to serialize.</param>
            <param name="propertyName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:C1.WPF.Core.C1BrushXmlSerializer.ReadBrush(System.Xml.XmlReader,System.String)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
            <param name="propertyName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:C1.WPF.Core.DateTimeEx.FromOADate(System.Double)">
            <summary>
            Returns a System.DateTime equivalent to the specified OLE Automation date.
            </summary>
            <param name="d">An OLE Automation date value.</param>
            <returns>An object that represents the same date and time as the d parameter.</returns>
        </member>
        <member name="M:C1.WPF.Core.DateTimeEx.ToOADate(System.DateTime)">
            <summary>
            Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <param name="date">The date that will be converted</param>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        </member>
        <member name="T:C1.WPF.Localization.C1LocalizeExtension">
            <summary>
            Represents a <see cref="T:System.Windows.Markup.MarkupExtension"/> providing localized strings from .resx resources.
            </summary>
            <remarks>The <see cref="T:C1.WPF.Localization.C1LocalizeExtension"/> doesn't track culture changes after the first call.
            This functionality should be implemented in derived classes if necessary.</remarks>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension"/> class.
            </summary>
            <param name="key">The <see cref="T:System.String"/> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension"/> class.
            </summary>
            <param name="key">The <see cref="T:System.String"/> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
            <param name="defaultValue">The default value used as fallback string.</param>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.Key">
            <summary>
            Gets or sets the key of a .resx object
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.DefaultValue">
            <summary>
            Gets or sets the default value. 
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.Assembly">
            <summary>
            Gets or sets the name of the Assembly where the .resx is located.
            By default returns the value of the <see cref="P:C1.WPF.Localization.C1Localizer.DefaultAssembly"/> property.
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.CurrentAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.Dictionary">
            <summary>
            Gets or sets the name of the .resx dictionary.
            If it is null, returns the default string 'Resources'.
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1LocalizeExtension.TargetProperty">
            <summary>
            The DependencyProperty which should get the localized content
            </summary>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.DetermineCulture(System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Globalization.CultureInfo"/> that should be used for localization. 
            Default implementation returns the value of the <see cref="P:C1.WPF.Localization.C1Localizer.DefaultCulture"/> property.
            </summary>
            <param name="target">The <see cref="T:System.Windows.DependencyObject"/> object for localization.</param>
            <returns>The <see cref="T:System.Globalization.CultureInfo"/> object.</returns>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">
            The <see cref="T:System.Windows.Markup.IProvideValueTarget"/> provided from the MarkupExtension
            </param>
            <returns>The founded item from the .resx directory or default value if not founded.</returns>
            <exception cref="T:System.InvalidOperationException">
            thrown if <paramref name="serviceProvider"/> is not type of <see cref="T:System.Windows.Markup.IProvideValueTarget"/>
            </exception>
        </member>
        <member name="M:C1.WPF.Localization.C1LocalizeExtension.SetNewValue(System.Object)">
            <summary>
            Sets the value of the DependencyProperty to the passed Value
            </summary>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="T:C1.WPF.Localization.C1Localizer">
            <summary>
            The <see cref="T:C1.WPF.Localization.C1Localizer"/> class represents the set of 
            static methods and properties used for localization. 
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1Localizer.DefaultCulture">
            <summary>
            Gets the default <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Localization.C1Localizer.DefaultAssembly">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value determining the name of the assembly, 
            containing resources. By default returns the name of the entry assembly.
            </summary>
            <remarks>If your resources are defined in the entry assembly or in its satellite assemblies, 
            you don't need to change this property value. Use this property if your resources are defined, 
            for example, in the custom control's assembly.
            </remarks>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Returns the localized string for the specified culture.
            </summary>
            <remarks>Search order:
            - searching in the specified resource Assembly;
            - searching in satellite Assemblies of the specified resource Assembly;
            - searching in the executing assembly;
            - repeating the search in above assemblies for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
            <param name="resourceAssembly">The name of executing assembly.</param>
            <param name="resourceDictionary">The name of resource dictionary.</param>
            <param name="resourceKey">The resource key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="currentAssembly">The current executing assembly.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.String,System.Globalization.CultureInfo,System.Reflection.Assembly)">
            <summary>
            Returns the localized string for the specified culture.
            </summary>
            <remarks>Search order:
            - searching in the specified resource Assembly;
            - searching in satellite Assemblies of the specified resource Assembly;
            - searching in the executing assembly;
            - repeating the search in above assemblies for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
            <param name="resourceAssembly">The name of resource assembly.</param>
            <param name="resourceDictionary">The name of resource dictionary.</param>
            <param name="resourceKey">The resource key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> info.</param>
            <param name="currentAssembly">The current executing assembly.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Returns the localized string for the specified culture.
            </summary>
            <remarks>Search order:
            - searching in the executing Assembly;
            - repeating the search for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
            <param name="resourceDictionary">The name of resource dictionary.</param>
            <param name="resourceKey">The resource key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="currentAssembly">The executing assembly.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.Globalization.CultureInfo,System.Reflection.Assembly)">
            <summary>
            Returns the localized string for the specified culture.
            </summary>
            <remarks>Search order:
            - searching in the executing Assembly;
            - repeating the search for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
            <param name="resourceDictionary">The name of resource dictionary.</param>
            <param name="resourceKey">The resource key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="currentAssembly">The current executing assembly.</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Returns the first part of assembly name (i.e. the name without version etc.).
            </summary>
            <param name="assembly"></param>
            Returns the first part of assembly name (i.e. the name without version etc.).
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Localization.C1Localizer.GetParent(System.Globalization.CultureInfo)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            </summary>
            <param name="ci">The culture info to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.WPF.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.WPF.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix@,System.Windows.Media.Matrix@)">
            <summary>
            Multiplies the left matrix by the right matrix,
            returns the resulting matrix in the output parameter.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <param name="result">The product of multiplying the two matrices.</param>
        </member>
        <member name="M:C1.WPF.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <returns>The product of multiplying the two matrices.</returns>
        </member>
        <member name="M:C1.WPF.Extensions.Transform(System.Windows.Media.Matrix,System.Double,System.Double)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="matrix">The Matrix defining transformation.</param>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>The result of the transformation for the point.</returns>
        </member>
        <member name="M:C1.WPF.Extensions.Transform(System.Numerics.Matrix3x2,System.Single,System.Single)">
            <summary>
            Transforms the point.
            </summary>
            <param name="m"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Extensions.Transform(System.Numerics.Matrix3x2,System.Drawing.PointF)">
            <summary>
            Transforms the point.
            </summary>
            <param name="matrix"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Extensions.Transform(System.Numerics.Matrix3x2,System.Drawing.RectangleF)">
            <summary>
            Transforms the rectangle.
            </summary>
            <param name="matrix"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:C1.WPF.RectWrapper">
            <summary></summary>
        </member>
        <member name="P:C1.WPF.RectWrapper.Rect">
            <summary></summary>
        </member>
        <member name="M:C1.WPF.RectWrapper.#ctor(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="rect"></param>
        </member>
        <member name="M:C1.WPF.RectWrapper.ToRect">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.GenerateLifecycleApi">
            <summary>
            When set to false, it will avoid generating the lifecycle methods. This will also disable <see cref="P:C1.CodeGeneration.C1ControlAttribute.CheckLicense"/>, <see cref="P:C1.CodeGeneration.C1ControlAttribute.SetDefaultStyleKey"/>, <see cref="P:C1.CodeGeneration.C1ControlAttribute.NeedsInitializeStatic"/>, <see cref="P:C1.CodeGeneration.C1ControlAttribute.GenerateCommonApi"/> and <see cref="P:C1.CodeGeneration.C1ControlAttribute.GenerateTheme"/>.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.CheckLicense">
            <summary>
            When set to false, it will avoid generating the code to check for a valid license.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.GenerateCommonApi">
            <summary>
            When set to false, it will avoid generating default transitions to "Common" visual states in WPF and WinUI.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.GenerateTheme">
            <summary>
            When set to true, it will generate an internal "Theme" property that gives information to the control about the current control theme.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.SetDefaultStyleKey">
            <summary>
            When set to false, it will avoid setting "DefaultStyleKey" in WPF and WinUI.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1ControlAttribute.NeedsInitializeStatic">
            <summary>
            When set to true, it will generate a static constructor and a partial InitializeStatic method to be implemented in control code.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.Name">
            <summary>
            Gets or sets the name of the state that the control can be in.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.GroupName">
            <summary>
            Gets or sets the name of the group that the state belongs to.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.Condition">
            <summary>
            Gets or sets the condition to meet this visual state.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1TemplatePartAttribute.Name">
            <summary>
            Gets or sets the name of the template part.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1TemplatePartAttribute.Type">
            <summary>
            Gets or sets the type of the template part.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.LicenseHelper">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.LicenseHelper.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.LicenseHelper.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseHelper.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:GrapeCity.Common.ILicenseData`1"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:GrapeCity.Common.ILicenseData`1"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.LicenseHelper.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:GrapeCity.Common.ILicenseData`1"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.LicenseHelper.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseHelper.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.C1_Logomark">
            <summary>
              Gets the C1 icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://developer.mescius.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://developer.mescius.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://developer.mescius.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://developer.mescius.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://developer.mescius.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.LicenseInfoPanel">
            <summary>
            Interaction logic for LicenseInfoPanel.xaml
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.headerPanel">
            <summary>
            headerPanel Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.headerIcon">
            <summary>
            headerIcon Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.headerText">
            <summary>
            headerText Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyText">
            <summary>
            bodyText Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyLinkPanel">
            <summary>
            bodyLinkPanel Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyWebLinkBlock">
            <summary>
            bodyWebLinkBlock Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyWebLink">
            <summary>
            bodyWebLink Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyWebLinkText">
            <summary>
            bodyWebLinkText Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyActivateLinkBlock">
            <summary>
            bodyActivateLinkBlock Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyActivateLink">
            <summary>
            bodyActivateLink Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyActivateLinkText">
            <summary>
            bodyActivateLinkText Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyDetailHeader">
            <summary>
            bodyDetailHeader Name Field
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseInfoPanel.bodyDetail">
            <summary>
            bodyDetail Name Field
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseInfoPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WPFLicenseProvider`1">
            <summary>
              Represents a license provider of a WPF PowerTools component.
            </summary>
        </member>
    </members>
</doc>
