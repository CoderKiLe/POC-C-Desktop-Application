<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.WPF.Input</name>
    </assembly>
    <members>
        <member name="T:C1.WPF.Input.AutoSizeContentPresenter">
            <summary>
            <see cref="T:System.Windows.Controls.ContentPresenter"/> whose size can be determined by the size of its content and keep it if the content size is reduced.
            </summary>
            <remarks>This control is useful for popup's whose content is a virtualizing control as the size can be changed as the user scrolls.</remarks>
        </member>
        <member name="F:C1.WPF.Input.AutoSizeContentPresenter._autoSizeMode">
            <summary>
            Gets or sets how the control determine its size.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.InvalidateAutoSize">
            <summary>
            Invalidates the cached size. After this call the size of this control will be the size of the content for all the modes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.AutoSizeContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.AutoSizeContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.AutoSizeContentPresenter.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.AutoSizeContentPresenter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.AutoSizeContentPresenter.AutoSizeModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.AutoSizeContentPresenter.AutoSizeMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.AutoSizeContentPresenter.AutoSizeMode">
            <summary>
            Gets or sets how the control determine its size.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.AutoSizeMode">
            <summary>
            Determines how the <see cref="T:C1.WPF.Input.AutoSizeContentPresenter"/> will be resized when the content changes its size.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoSizeMode.GrowAndShrink">
            <summary>
            Change its size according to the content size
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoSizeMode.GrowOnly">
            <summary>
            Grows its size when the content is bigger but remains unchanged when the content size is smaller. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoSizeMode.GrowHorizontally">
            <summary>
            Grows its size horizontally, but it shrink its size vertically if needed.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1DropDown">
            <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDown._showButton">
            <summary>
            Gets or sets whether the button is shown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDown._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDown.DropDownButtonVisibility">
            <summary>
            Gets the visibility of the drop-down button.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1DropDown"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDown.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1DropDown.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1DropDown.ShowButtonProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDown.ShowButton"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDown.ShowButton">
            <summary>
            Gets or sets whether the button is shown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDown.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDown.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDown.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1DropDownButton">
            <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.OnFlowDirectionChanged">
            <summary>
            Called when the flow direction changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._isDropDownOpen">
            <summary>
            Open or close the control drop-down popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._minDropDownHeight">
            <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._minDropDownWidth">
            <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._maxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._maxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownDirection">
            <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._autoClose">
            <summary>
            Auto closes the dropdown when the user clicks outside it.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._closeOnLostFocus">
            <summary>
            Gets or sets whether the popup is closed automatically when the control loses the focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._autoSizeMode">
            <summary>
            Gets or sets how the content of the poup will be resized as the content size changes.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._popupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._header">
            <summary>
            Gets or sets the header of the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._headerTemplate">
            <summary>
            Gets or sets the template displayed in the header of the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._dropDownButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.HeaderVisibility">
            <summary>
            Gets the visibility of the header.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1DropDownButton.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="E:C1.WPF.Input.C1DropDownButton.IsDropDownOpenChanged">
            <summary>
            Called when the drop-down popup is opened or closed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.GetPreferedLocations">
            <summary>
            Get the locations where the dropdown will try to locate the <see cref="T:System.Windows.Controls.Primitives.Popup"/> once it's opened.
            </summary>
            <returns>Ordered list of <see cref="T:C1.WPF.Input.AnchorMatching"/> to try.</returns>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1DropDownButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.IsDropDownOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.IsDropDownOpen">
            <summary>
            Open or close the control drop-down popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.MinDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.MinDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.MinDropDownHeight">
            <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.MinDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.MinDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.MinDropDownWidth">
            <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.MaxDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.MaxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.MaxDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.MaxDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.MaxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownDirection">
            <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.AutoCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.AutoClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.AutoClose">
            <summary>
            Auto closes the dropdown when the user clicks outside it.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.CloseOnLostFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.CloseOnLostFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.CloseOnLostFocus">
            <summary>
            Gets or sets whether the popup is closed automatically when the control loses the focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.AutoSizeModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.AutoSizeMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.AutoSizeMode">
            <summary>
            Gets or sets how the content of the poup will be resized as the content size changes.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.PopupStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.PopupStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.PopupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.Header">
            <summary>
            Gets or sets the header of the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.HeaderTemplate">
            <summary>
            Gets or sets the template displayed in the header of the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.DropDownButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.DropDownButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.DropDownButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1DropDownButton.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1DropDownButton.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1DropDownButton.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1DropDownButton.ChangeVisualStateDropDownOpen(System.Boolean)">
            <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.PrepareDropDownEventArgs">
            <summary>
            Argument of the event fired before the drop-down box is opened.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.PrepareDropDownEventArgs.DropDownWidth">
            <summary>
            Width of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.PrepareDropDownEventArgs.DropDownHeight">
            <summary>
            Height of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1EditableContentControl">
            <summary>
            ContentControl that supports edit mode using a TextBox.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.ActualContent">
            <summary>
            Allows to set the content without generating a parent child relationship clash when the content already has a parent.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:Content"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnIsInEditModeChanged">
            <summary>
            The control has changed the mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._isEditable">
            <summary>
            Gets or sets whether the control can be edited.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._isInEditMode">
            <summary>
            Gets or sets whether the control is in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._editControl">
            <summary>
            Control visible when it is in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._contentControl">
            <summary>
            Control visible when it is not in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._contentConverter">
            <summary>
            Used to create the control content from the edited content.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1EditableContentControl.EditCompleted">
            <summary>
            Fired when the user has completed the edits.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnEditCompleted">
            <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCompleted" /> event.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1EditableContentControl.EditCanceled">
            <summary>
            Fired when the user exits edit mode without changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnEditCanceled">
            <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCanceled" /> event.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1EditableContentControl.EditStarted">
            <summary>
            Fired when the control enters edit mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnEditStarted">
            <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditStarted" /> event.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.IsDirty">
            <summary>
            Get or sets whether the element was edited during edit mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.ShouldEnterEditModeOnKeyDown(System.Windows.Input.Key)">
            <summary>
            Called to define if the control has to enter edit mode when a particular key is pressed.
            For example: arrow keys might not change to edit mode.
            </summary>
            <param name="key">Key that was pressed.</param>
            <returns>True if the control has enter edit mode.</returns>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.UpdateVisualState">
            <summary>
            Update the visual state of this control
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1EditableContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.C1EditableContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.IsEditable">
            <summary>
            Gets or sets whether the control can be edited.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.IsInEditModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.IsInEditMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.IsInEditMode">
            <summary>
            Gets or sets whether the control is in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.EditControlProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.EditControl"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.EditControl">
            <summary>
            Control visible when it is in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.ContentControlProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.ContentControl"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.ContentControl">
            <summary>
            Control visible when it is not in edit mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.ContentConverterProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.ContentConverter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.ContentConverter">
            <summary>
            Used to create the control content from the edited content.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1EditableContentControl.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1EditableContentControl.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1EditableContentControl.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1EditableContentControl.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1FilePicker">
            <summary>
            File picker that opens a dialog box control to allows you to select one or more files.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._textAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1FilePicker" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._multiselect">
            <summary>
            Gets or sets whether it is possible to select more than one file.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._filter">
            <summary>
            Gets or sets the filter that will be applied to the <see cref="T:Microsoft.Win32.OpenFileDialog" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._filterIndex">
            <summary>
            Gets or sets the filter index that will be applied to the <see cref="T:Microsoft.Win32.OpenFileDialog" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._selectedFile">
            <summary>
            Gets or sets the file displayed in this editor.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._selectedFiles">
            <summary>
            Gets or sets the files displayed in this editor.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._initialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._browseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the browse button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._browseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the browse button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._browseButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the file picker..
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1FilePicker.SelectedFilesChanged">
            <summary>
            Fires when the <see cref="P:C1.WPF.Input.C1FilePicker.SelectedFiles"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OnSelectedFilesChanged(System.EventArgs)">
            <summary>
            Raises the SelectedFilesChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OpenRead">
            <summary>
            Opens the selected file for reading.
            </summary>
            <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.Input.C1FilePicker.SelectedFile"/>, but
            this method still works.
            </remarks>
            <returns>The stream of the selected file.</returns>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.SelectedFileName">
            <summary>
            Gets the name of the selected file.
            </summary>
            <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.Input.C1FilePicker.SelectedFile"/>, but
            this property still works.
            </remarks>
        </member>
        <member name="E:C1.WPF.Input.C1FilePicker.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.HasSelectedFiles">
            <summary>
            True, if files were selected.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.ClearSelection">
            <summary>
            Removes the selected files.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1FilePicker"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.TextAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1FilePicker" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.MultiselectProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.Multiselect"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.Multiselect">
            <summary>
            Gets or sets whether it is possible to select more than one file.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.FilterProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.Filter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.Filter">
            <summary>
            Gets or sets the filter that will be applied to the <see cref="T:Microsoft.Win32.OpenFileDialog" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.FilterIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.FilterIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.FilterIndex">
            <summary>
            Gets or sets the filter index that will be applied to the <see cref="T:Microsoft.Win32.OpenFileDialog" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.SelectedFileProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.SelectedFile"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.SelectedFile">
            <summary>
            Gets or sets the file displayed in this editor.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.SelectedFilesProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.SelectedFiles"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.SelectedFiles">
            <summary>
            Gets or sets the files displayed in this editor.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.InitialDirectoryProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.InitialDirectory"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.BrowseIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.BrowseIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.BrowseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the browse button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.BrowseIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.BrowseIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.BrowseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the browse button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.BrowseButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.BrowseButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.BrowseButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the file picker..
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1FilePicker.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1FilePicker.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1FilePicker.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1FilePicker.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1HyperlinkButton">
            <summary>
            Represents a button control that displays a hyperlink.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1HyperlinkButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1HyperlinkButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1HyperlinkButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1HyperlinkButton.NavigateUri">
            <summary>
            Gets or sets a URI to navigate to when the <see cref="T:C1.WPF.Input.C1HyperlinkButton"/> is activated.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1HyperlinkButton.NavigateUriProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1HyperlinkButton.NavigateUri"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1HyperlinkButton.TargetName">
            <summary>
            Gets or sets the name of a target window or frame for the <see cref="T:C1.WPF.Input.C1HyperlinkButton"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1HyperlinkButton.TargetNameProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1HyperlinkButton.TargetName"/> dependency property. 
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1SplitButton">
            <summary>
            Button which contains another button in the right side which opens a popup.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1SplitButton.Click">
            <summary>
            Occurs when a System.Windows.Controls.Button is clicked.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1SplitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1SplitButton"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1SplitButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1SplitButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.C1StopsSlider">
            <summary>
            The stops-slider control enables the end-user to select multiple values by moving thumbs along a track as well as creating new ones by tapping or removing with Del key.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.Stops">
            <summary>
            Gets the collection of stops in the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._selectedIndex">
            <summary>
            Gets or sets the index of the selected stop.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._allowAdding">
            <summary>
            Gets or sets whether new stops can be added by tapping the track.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._allowRemoving">
            <summary>
            Gets or sets whether new stops can be removed by pressing Del key.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._trackVisibility">
            <summary>
            Gets or sets whether the track bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._stopStyle">
            <summary>
            Gets or sets the style of the thumbs.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._selectedStopStyle">
            <summary>
            Gets or sets the style of the selected thumb.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._trackStyle">
            <summary>
            Gets or sets the style of the track element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1StopsSlider.StopsChanged">
            <summary>
            Called when the collection of stops changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1StopsSlider.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1StopsSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1StopsSlider"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1StopsSlider.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1StopsSlider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.SelectedIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.SelectedIndex">
            <summary>
            Gets or sets the index of the selected stop.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1StopsSlider.SelectedIndexChanged">
            <summary> 
            Event raised when the <see cref="P:C1.WPF.Input.C1StopsSlider.SelectedIndex"/> property has changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.AllowAddingProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.AllowAdding"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.AllowAdding">
            <summary>
            Gets or sets whether new stops can be added by tapping the track.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.AllowRemovingProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.AllowRemoving"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.AllowRemoving">
            <summary>
            Gets or sets whether new stops can be removed by pressing Del key.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.TrackVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.TrackVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.TrackVisibility">
            <summary>
            Gets or sets whether the track bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.StopStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.StopStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.StopStyle">
            <summary>
            Gets or sets the style of the thumbs.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.SelectedStopStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.SelectedStopStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.SelectedStopStyle">
            <summary>
            Gets or sets the style of the selected thumb.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.TrackStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.TrackStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.TrackStyle">
            <summary>
            Gets or sets the style of the track element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1StopsSlider.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1StopsSlider.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1StopsSlider.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.StopCollection">
            <summary>
            Collection of <see cref="T:C1.WPF.Input.StopValue"/>.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.StopValue">
            <summary>
            Specifies the value of a stop in <see cref="T:C1.WPF.Input.C1StopsSlider"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.StopValue.Value">
            <summary>
            Gets or sets the value of a stop.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.StopValue.PropertyChanged">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.StopValue.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.op_Implicit(C1.WPF.Input.StopValue)~System.Double">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.op_Implicit(System.Double)~C1.WPF.Input.StopValue">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.StopValue.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.StopsChangedEventArgs">
            <summary>
            Contains information about <see cref="E:C1.WPF.Input.C1StopsSlider.StopsChanged"/> event.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.StopsChangedEventArgs.Stops">
            <summary>
            Gets the list of stops values.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1TextEditableContentControl">
            <summary>
            The ContentControl that supports edit mode using a TextBox.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextEditableContentControl.PasteEvent(System.Object,System.Windows.DataObjectPastingEventArgs)">
            <summary>
            Called on Right click Paste event over editor to reset _lastKey.Key to None.
            Paste behavior on Ctrl+V will avoid resetting the last key.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl._textAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1TextEditableContentControl" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl._isPlaceholderVisible">
            <summary>
            Get or sets if the placeholder is shown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl._caretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextEditableContentControl.ValidateInput">
            <summary>
            Event fired when the editing is completed.
            Handle this event to validate the new input.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextEditableContentControl.TextBoxKeyDown">
            <summary>
            Event fired when a key is pressed in the EditableTextBox.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextEditableContentControl.TextBoxKeyUp">
            <summary>
            Event fired when a key is released in the EditableTextBox.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextEditableContentControl.TextEdited">
            <summary>
            Event fired to do when the text is edited in the EditableTextBox.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextEditableContentControl.EditTextBox">
            <summary>
            <see cref="T:C1.Silverlight.C1TextBoxBase" /> used during the edit mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextEditableContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1TextEditableContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextEditableContentControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TextEditableContentControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextEditableContentControl.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextEditableContentControl.TextAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1TextEditableContentControl" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextEditableContentControl.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextEditableContentControl.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl.IsPlaceholderVisibleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextEditableContentControl.IsPlaceholderVisible"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextEditableContentControl.IsPlaceholderVisible">
            <summary>
            Get or sets if the placeholder is shown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextEditableContentControl.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextEditableContentControl.CaretBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextEditableContentControl.CaretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.ValidateInputEventArgs">
            <summary>
            Arguments for the event fired to validate the input.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.ValidateInputEventArgs.Input">
            <summary>
            New text input
            </summary>
        </member>
        <member name="P:C1.WPF.Input.ValidateInputEventArgs.IsValidInput">
            <summary>
            Set this flag to undo the edits if the input is not valid.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ComboBox">
            <summary>
            The C1ComboBox control combines an editable text box with an auto-searchable drop-down list. The list can be shown or hidden by clicking the control’s drop-down arrow.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ItemsSource">
            <summary>
            Gets or sets the collection of items.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ItemsSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.Items">
            <summary>
            Gets the collection of ComboBox items.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DataCollection">
            <summary>
            Gets the underlying collection.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.SelectionCommitted">
            <summary>
            Event fired when the select item is committed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnSelectionCommitted(System.Object,System.Object)">
            <summary>
            Fires the SelectionCommitted event.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnDisplayMemberPathChanged(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnItemTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedItems">
            <summary>
            Gets or set the list of items which are selected.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.BeginEdit(System.String)">
            <summary>
            Begins the edit.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.AddSingleItemToSelectedItems(System.Object)">
            <summary>
            Adds single item to the SelectedItems collection if possible.
            </summary>
            <param name="singleItem">A single item. It should be split earlier if it contains <see cref="P:C1.WPF.Input.C1ComboBox.MultipleSelectionSeparator"/></param>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.CanAddToSelectedItems(System.Object)">
            <summary>
            Returns a value indicating whether the specified object can be added to the SelectedItems collection.
            </summary>
            <remarks>
            SelectedItems should only contain values that match the available items, 
            so we should avoid value mismatches and not add them to SelectedItems.
            </remarks>
            <param name="singleItem">Specified object to check.</param>
            <returns>true - if the specified object can be added, false -otherwise </returns>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:MouseLeftButtonDown"/> event occurs.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.SelectAll">
            <summary>
            Select all data item in multi Select mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.UnselectAll">
            <summary>
            Unselect all data item in multi Select mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectedItem">
            <summary>
            Gets or sets the current selected item or returns null if there is no selection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectedIndex">
            <summary>
            Gets or sets the current selected index or returns -1 if there is no selection, or the selection doesn't belong to the Items collection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectedValuePath">
            <summary>
            Gets or sets the path that is used to get the SelectedValue from the SelectedItem.
            </summary>
            <remarks>Returns the path used to get the SelectedValue. The default is an empty string.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectedValue">
            <summary>
            Gets or sets the value of the SelectedItem, obtained by using SelectedValuePath.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._text">
            <summary>
            Gets or sets the text in the <see cref="T:C1.WPF.Input.C1ComboBox" />. The behavior depends on the AutoComplete and IsEditable properties.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._itemConverter">
            <summary>
            Item converter used to convert the items to string and vice versa.
            </summary>
            <remarks>Use in conjunction with ItemTemplate to support AutoComplete and editing when providing custom item visualization.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._autoComplete">
            <summary>
            Gets or sets whether the control should try to automatically complete entries using the list items as an item source.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._isEditable">
            <summary>
            Gets or sets whether the user can select a value not contained in the <see cref="T:C1.WPF.Input.C1ComboBox" />' Items collection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._itemContainerStyle">
            <summary>
            Gets or sets the style used for the inner <see cref="T:C1.WPF.Input.C1ComboBox" />'s items.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._textAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._isDropDownOpen">
            <summary>
            Open or close the <see cref="T:C1.WPF.Input.C1ComboBox" /> popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._maxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._maxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownDirection">
            <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._scrollBarStyle">
            <summary>
            Gets or sets the style used for the inner scrollbar.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._caretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._condition">
            <summary>
            Gets or sets the filter condition of item source.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._multipleSelectionSeparator">
            <summary>
            Gets or sets text header separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._popupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._dropDownButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._showCheckBoxes">
            <summary>
            Gets or sets whether checkboxes are shown in each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._selectedBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox._cursorBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the item when it has focus.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.SelectedItemChanged">
            <summary>
            Called when the selected item changes.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.SelectedIndexChanged">
            <summary>
            Called when the selected index changes.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.SelectedValueChanged">
            <summary>
            Called when the selected value changes.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.IsDropDownOpenChanged">
            <summary>
            Called when the drop-down is opened or closed.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.EditCompleted">
            <summary>
            Handle this event to know when the user has completed the edits.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnEditCompleted">
            <summary>
            Fires the EditCompleted event.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.ValidateInput">
            <summary>
            Event fired when new text is added to an editable C1ComboBox.
            Catch this event to validate the new input.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.IsOpenKey(System.Windows.Input.Key)">
            <summary>
            Return true if that key should open the combo box.
            Override to handle you own keyboard selection strategy.
            </summary>
            <param name="key">The key that was pressed.</param>
            <returns>True if the key pressed should open the combo box.</returns>
        </member>
        <member name="E:C1.WPF.Input.C1ComboBox.SelectionChanged">
            <summary>
            Event fired when the SelectedItems is changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnSelectionChanged(System.Collections.IList,System.Collections.IList)">
            <summary>
            Fires the SelectionChanged event.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1ComboBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedItem">
            <summary>
            Gets or sets the current selected item or returns null if there is no selection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectedIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedIndex">
            <summary>
            Gets or sets the current selected index or returns -1 if there is no selection, or the selection doesn't belong to the Items collection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectedValuePathProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectedValuePath"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedValuePath">
            <summary>
            Gets or sets the path that is used to get the SelectedValue from the SelectedItem.
            </summary>
            <remarks>Returns the path used to get the SelectedValue. The default is an empty string.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectedValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectedValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedValue">
            <summary>
            Gets or sets the value of the SelectedItem, obtained by using SelectedValuePath.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.Text"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.Text">
            <summary>
            Gets or sets the text in the <see cref="T:C1.WPF.Input.C1ComboBox" />. The behavior depends on the AutoComplete and IsEditable properties.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ItemConverterProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ItemConverter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ItemConverter">
            <summary>
            Item converter used to convert the items to string and vice versa.
            </summary>
            <remarks>Use in conjunction with ItemTemplate to support AutoComplete and editing when providing custom item visualization.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.AutoCompleteProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.AutoComplete"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.AutoComplete">
            <summary>
            Gets or sets whether the control should try to automatically complete entries using the list items as an item source.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.IsEditable">
            <summary>
            Gets or sets whether the user can select a value not contained in the <see cref="T:C1.WPF.Input.C1ComboBox" />' Items collection.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ItemContainerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ItemContainerStyle">
            <summary>
            Gets or sets the style used for the inner <see cref="T:C1.WPF.Input.C1ComboBox" />'s items.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.IsDropDownOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.IsDropDownOpen">
            <summary>
            Open or close the <see cref="T:C1.WPF.Input.C1ComboBox" /> popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.MaxDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.MaxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.MaxDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.MaxDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.MaxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownDirection">
            <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ScrollBarStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ScrollBarStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ScrollBarStyle">
            <summary>
            Gets or sets the style used for the inner scrollbar.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.CaretBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.CaretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ConditionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.Condition"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.Condition">
            <summary>
            Gets or sets the filter condition of item source.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectionMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.MultipleSelectionSeparatorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.MultipleSelectionSeparator"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.MultipleSelectionSeparator">
            <summary>
            Gets or sets text header separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.PopupStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.PopupStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.PopupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.DropDownButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.DropDownButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.DropDownButtonStyle">
            <summary>
            Gets or sets the style of the button that opens the drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.ShowCheckBoxesProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.ShowCheckBoxes"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.ShowCheckBoxes">
            <summary>
            Gets or sets whether checkboxes are shown in each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBox.CursorBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ComboBox.CursorBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBox.CursorBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the item when it has focus.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ComboBoxSelectionMode">
            <summary>
            C1ComboBox Selection Mode
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBoxSelectionMode.Single">
            <summary>
            Allows Select single item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBoxSelectionMode.Multiple">
            <summary>
            Allows multiple selections. 
            </summary>
        </member>
        <member name="T:C1.WPF.Input.Condition">
            <summary>
            Defines how to filter the items of ComboBox.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Condition.StartWith">
            <summary>
            Select the item which start with the input text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Condition.Contains">
            <summary>
            List the items which contains the input text.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ComboBoxCollection">
            <summary>
            Defines C1ComboBox selected items list. 
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxCollection.#ctor(C1.WPF.Input.C1ComboBox)">
            <summary>
            Initializes a new instance of the C1ComboBoxList class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxCollection.ClearItems">
            <summary>
            Remove all items one by one. Trigger the remove handler 
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index. Exclude the same item.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ComboBoxItem">
            <summary>
            Model class to store settings of an item inside <see cref="T:C1.WPF.Input.C1ComboBox"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBoxItem.Parent">
            <summary>
            Gets the parent group item.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBoxItem.IsEnabled">
            <summary>
            Gets or sets the IsEnabled property.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxItem.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Input.C1ComboBoxItem"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxItem.#ctor(C1.DataCollection.IDataCollection{System.Object},System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Input.C1ComboBoxItem"/> class.
            </summary>
            <param name="collection">The collection containing the item.</param>
            <param name="dataIndex">Index of the data inside the collection.</param>
        </member>
        <member name="F:C1.WPF.Input.C1ComboBoxItem.Owner">
            <summary>
            Owner of this item. Needed for action directly on C1ComboBoxItem like set item.IsSelected.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxItem.SetField``1(``0@,``0,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.C1ComboBoxGroupItem">
            <summary>
            Grouped C1ComboBoxItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxGroupItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1ComboBoxGroupItem"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ComboBoxGroupItem.#ctor(C1.DataCollection.IDataCollectionGroup{System.Object,System.Object},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1ComboBoxGroupItem"/> class.
            </summary>
            <param name="group">The group item.</param>
            <param name="dataIndex">The index of the group inside the collection of groups.</param>
        </member>
        <member name="P:C1.WPF.Input.C1ComboBoxGroupItem.GroupText">
            <summary>
            Gets the a string representing the group item.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.ComboBoxItemsCollection">
            <summary>
            The collection of C1ComboBoxItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxItemsCollection.#ctor(C1.WPF.Input.C1ComboBox)">
            <summary>
            Default constructor
            </summary>
            <param name="comboBox"></param>
        </member>
        <member name="P:C1.WPF.Input.ComboBoxItemsCollection.DataCollection">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxItemsCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxItemsCollection.Add(System.Object)">
            <summary>
            Add data object directly
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxItemsCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.ComboBoxBoundItemsDataCollecction">
            <summary>
            The collection that contains cacheable <see cref="T:C1.WPF.Input.C1ComboBoxItem"/>
            </summary>
        </member>
        <member name="T:C1.WPF.Input.ComboBoxBoundItemsDataCollecction.ComboBoxBoundItemsSelectDataCollection">
            <summary>
            Transforms the data item in collection into collection of C1ComboBoxItem
            </summary>
        </member>
        <member name="P:C1.WPF.Input.ComboBoxBoundItemsDataCollecction.ComboBoxBoundItemsSelectDataCollection.Parent">
            <summary>
            The parent C1ComboBoxGroupItem that contains this collection of C1ComboBoxItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxBoundItemsDataCollecction.#ctor(C1.DataCollection.IDataCollection{System.Object},C1.WPF.Input.C1ComboBoxGroupItem,C1.WPF.Input.C1ComboBox)">
            <summary>
            Default constructor
            </summary>
            <param name="source"></param>
            <param name="parent"></param>
            <param name="owner"></param>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxBoundItemsDataCollecction.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.ComboBoxGroupedItemsDataCollection">
            <summary>
            The collection that contains grouped C1ComboBoxItem and their children.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.ComboBoxGroupedItemsDataCollection.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.DropDownDirection">
            <summary>
            Provides the supported expand directions for the <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DropDownDirection.BelowOrAbove">
            <summary>
            Tries to open the drop-down <see cref="T:C1.WPF.C1ComboBox" /> below the header.
            If it is not possible tries to open above it.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DropDownDirection.AboveOrBelow">
            <summary>
            Tries to open the drop-down <see cref="T:C1.WPF.C1ComboBox" /> above the header.
            If it is not possible tries to open below it.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DropDownDirection.ForceBelow">
            <summary>
            Forces the drop-down <see cref="T:C1.WPF.C1ComboBox" /> to open below the header.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DropDownDirection.ForceAbove">
            <summary>
            Forces the drop-down <see cref="T:C1.WPF.C1ComboBox" /> to open above the header.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.AutoCompleteMode">
            <summary>
            Specifies the mode for the automatic completion feature used in the <see cref="T:C1.WPF.Input.C1MultiSelect"/> controls.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoCompleteMode.None">
            <summary>
            Disables the automatic completion feature for the <see cref="T:C1.WPF.Input.C1MultiSelect"/> controls.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoCompleteMode.Append">
            <summary>
            Appends the remainder of the most likely candidate string to the existing characters, highlighting the appended characters.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoCompleteMode.Suggest">
            <summary>
            Displays the auxiliary drop-down list associated with the edit control. This drop-down is populated with one or more suggested completion strings.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.AutoCompleteMode.SuggestAppend">
            <summary>
            Applies both <see cref="F:C1.WPF.Input.AutoCompleteMode.Append"/> and <see cref="F:C1.WPF.Input.AutoCompleteMode.Suggest"/> options.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.SelectedState">
            <summary>
            Define selected item state
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1MultiSelect">
            <summary>
            A <see cref="T:C1.WPF.Input.C1TagEditor"/> as base editor with <see cref="T:C1.WPF.ListView.C1ListView"/> as drop-down.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._isDropDownOpen">
            <summary>
            Gets or sets a value that indicates whether the drop-down is currently visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._showDropDownButton">
            <summary>
            Gets or sets a value that indicates whether the control should display a drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._autoSuggestMode">
            <summary>
            Gets or sets a value that indicates the condition of filtering.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._separator">
            <summary>
            Gets or sets string which is used as separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._checkedMemberPath">
            <summary>
            Gets or sets the name of the property used to control the checkboxes placed next to each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._disabledMemberPath">
            <summary>
            Gets or sets the name of the property used to control the enable or disable status to each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._maxHeaderItems">
            <summary>
            Gets or sets the maximum number of items to display on the control header.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._showCheckBoxes">
            <summary>
            Gets or sets a value that indicates whether to show checkboxes for items in dropdown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._isTagEditable">
            <summary>
            Gets or sets a value that determines whether the tags are editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._displayMode">
            <summary>
            Gets or sets a value that indicates whether to show tags or text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._headerFormat">
            <summary>
            Gets or sets the format string used to create the header content when the control has more than MaxHeaderItems items selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._showSelectAll">
            <summary>
            Gets or sets a value that indicates whether show select all UI or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectAllCaption">
            <summary>
            Gets or sets the caption for checkbox when execute SelectAll.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._unSelectAllCaption">
            <summary>
            Gets or sets the caption for checkbox when execute UnSelectAll.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._captionStyle">
            <summary>
            Gets or sets a style used for caption CheckBox.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._isHeaderFormatVisible">
            <summary>
            Gets or sets a value indicating whether control displays the <see cref="P:C1.WPF.Input.C1MultiSelect.HeaderFormat"/> text instead of selected items.
            </summary>
            <remarks>The <see cref="T:C1.WPF.Input.C1MultiSelect"/> control changes this property value accordng to the number of the currently selected items 
            and the <see cref="P:C1.WPF.Input.C1MultiSelect.MaxSelectedItems"/> property value.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._isEditable">
            <summary>
            Gets or sets a value that determines whether the content of the input element should be editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._tagStyle">
            <summary>
            Gets or sets the style used for the tags in Tag mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._dropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._dropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._minDropDownHeight">
            <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._minDropDownWidth">
            <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._maxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._maxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectionMode">
            <summary>
            Gets or sets the selection behavior for the ListBox control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectedValuePath">
            <summary>
            Gets or sets the property path that is used to get the SelectedValue property of the SelectedItem property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectedValue">
            <summary>
            Gets or sets the value of the selected item, obtained by using the SelectedValuePath.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._isSynchronizedWithCurrentItem">
            <summary>
            Gets or sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._autoCompleteMode">
            <summary>
            Gets or sets an option that controls how automatic completion works for the C1MultiSelect.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._highlightColor">
            <summary>
            Gets or sets the matched suggest text highlight color.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._highlightFontWeight">
            <summary>
            Gets or sets the matched suggest text font weight.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._popupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.Text">
            <summary>
            Gets the text shown in the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.Text"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._maxSelectedItems">
            <summary>
            Gets or sets the maximum number of items to selected on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._selectedBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect._cursorBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the item when it has focus.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.ItemsSource">
            <summary>
            Gets or sets the collection of items.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.ItemsSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.Items">
            <summary>
            Gets the collection of ComboBox items.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.DataCollection">
            <summary>
            Gets the underlying collection.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.ListBox">
            <summary>
            Get <see cref="T:C1.WPF.ListView.C1ListView"/> in drop down.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.GroupStyle">
            <summary>
            Gets a collection of GroupStyle objects that define the appearance of each level of groups.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsGrouping">
            <summary>
            Gets a value that indicates whether the control is using grouping.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedItemsProperty">
            <summary>
            Gets the currently selected items.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.GetTextFromItems">
            <summary>
            Converts all selected items into a string separated using Separator value (by default it is a comma followed by a space).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of string exceed 2GB.</exception>
            <returns>Value of converted string.</returns>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedItems">
            <summary>
            Gets or set the list of items which are selected.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsTextSearchEnabled">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            OnPreviewKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.SelectAll">
            <summary>
            Selects all the items in a <see cref="T:C1.WPF.Input.C1MultiSelect"/>.
            <para>You can use <see cref="P:C1.WPF.Input.C1MultiSelect.MaxSelectedItems"/> to limit the number of items that can be selected.</para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of selected objects exceed 2GB.</exception>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.UnselectAll">
            <summary>
            Clears all the selection in a <see cref="T:C1.WPF.Input.C1MultiSelect"/>.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1MultiSelect.SelectionChanged">
            <summary>
            Occurs when the selection of a C1MultiSelect changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.OnSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.FastClearSelectedItems">
            <summary>
            Clears all selected items at once.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.UpdateHeader">
            <summary>
            Updates header by selection.
            </summary>
            <returns>True, if header text was set. False, otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1MultiSelect"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.IsDropDownOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsDropDownOpen">
            <summary>
            Gets or sets a value that indicates whether the drop-down is currently visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.ShowDropDownButtonProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.ShowDropDownButton"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.ShowDropDownButton">
            <summary>
            Gets or sets a value that indicates whether the control should display a drop-down button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.AutoSuggestModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.AutoSuggestMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.AutoSuggestMode">
            <summary>
            Gets or sets a value that indicates the condition of filtering.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SeparatorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.Separator"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.Separator">
            <summary>
            Gets or sets string which is used as separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.CheckedMemberPathProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.CheckedMemberPath"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.CheckedMemberPath">
            <summary>
            Gets or sets the name of the property used to control the checkboxes placed next to each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.DisabledMemberPathProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.DisabledMemberPath"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.DisabledMemberPath">
            <summary>
            Gets or sets the name of the property used to control the enable or disable status to each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MaxHeaderItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MaxHeaderItems"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MaxHeaderItems">
            <summary>
            Gets or sets the maximum number of items to display on the control header.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.ShowCheckBoxesProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.ShowCheckBoxes"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.ShowCheckBoxes">
            <summary>
            Gets or sets a value that indicates whether to show checkboxes for items in dropdown.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.IsTagEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.IsTagEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsTagEditable">
            <summary>
            Gets or sets a value that determines whether the tags are editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.DisplayModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.DisplayMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.DisplayMode">
            <summary>
            Gets or sets a value that indicates whether to show tags or text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.HeaderFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.HeaderFormat"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.HeaderFormat">
            <summary>
            Gets or sets the format string used to create the header content when the control has more than MaxHeaderItems items selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.ShowSelectAllProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.ShowSelectAll"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.ShowSelectAll">
            <summary>
            Gets or sets a value that indicates whether show select all UI or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectAllCaptionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectAllCaption"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectAllCaption">
            <summary>
            Gets or sets the caption for checkbox when execute SelectAll.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.UnSelectAllCaptionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.UnSelectAllCaption"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.UnSelectAllCaption">
            <summary>
            Gets or sets the caption for checkbox when execute UnSelectAll.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.CaptionStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.CaptionStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.CaptionStyle">
            <summary>
            Gets or sets a style used for caption CheckBox.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.IsHeaderFormatVisibleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.IsHeaderFormatVisible"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsHeaderFormatVisible">
            <summary>
            Gets or sets a value indicating whether control displays the <see cref="!:HeaderFormat" /> text instead of selected items.
            </summary>
            <remarks>The <see cref="T:C1.WPF.Input.C1MultiSelect" /> control changes this property value accordng to the number of the currently selected items 
                and the <see cref="!:MaxSelectedItems" /> property value.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsEditable">
            <summary>
            Gets or sets a value that determines whether the content of the input element should be editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.TagStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.TagStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.TagStyle">
            <summary>
            Gets or sets the style used for the tags in Tag mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.DropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.DropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.DropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.DropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.DropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.DropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MinDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MinDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MinDropDownHeight">
            <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MinDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MinDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MinDropDownWidth">
            <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MaxDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MaxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MaxDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MaxDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MaxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectionMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectionMode">
            <summary>
            Gets or sets the selection behavior for the ListBox control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedValuePathProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectedValuePath"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedValuePath">
            <summary>
            Gets or sets the property path that is used to get the SelectedValue property of the SelectedItem property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectedValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedValue">
            <summary>
            Gets or sets the value of the selected item, obtained by using the SelectedValuePath.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectedIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.IsSynchronizedWithCurrentItemProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.IsSynchronizedWithCurrentItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.IsSynchronizedWithCurrentItem">
            <summary>
            Gets or sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.AutoCompleteModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.AutoCompleteMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.AutoCompleteMode">
            <summary>
            Gets or sets an option that controls how automatic completion works for the C1MultiSelect.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.HighlightColorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.HighlightColor"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.HighlightColor">
            <summary>
            Gets or sets the matched suggest text highlight color.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.HighlightFontWeightProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.HighlightFontWeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.HighlightFontWeight">
            <summary>
            Gets or sets the matched suggest text font weight.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.PopupStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.PopupStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.PopupStyle">
            <summary>
            Gets or sets the style for the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MaxSelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MaxSelectedItems"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MaxSelectedItems">
            <summary>
            Gets or sets the maximum number of items to selected on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelect.CursorBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MultiSelect.CursorBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelect.CursorBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the item when it has focus.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelect.ChangeVisualStateHeaderFormat(System.Boolean)">
            <summary>
            Updates the current visual state of the HeaderFormat visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1MultiSelectCollection">
            <summary>
            Defines C1ComboBox selected items list. 
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectCollection.#ctor(C1.WPF.Input.C1MultiSelect)">
            <summary>
            Initializes a new instance of the C1ComboBoxList class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectCollection.ClearItems">
            <summary>
            Remove all items one by one. Trigger the remove handler 
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectCollection.FastClearItems">
            <summary>
            Removing items one by one can greatly affect performance. Clear all items at once if there is no need to process each item.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index. Exclude the same item.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1MultiSelectItem">
            <summary>
            Model class to store settings of an item inside <see cref="T:C1.WPF.Input.C1MultiSelect"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelectItem.Parent">
            <summary>
            Gets the parent group item.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelectItem.IsEnabled">
            <summary>
            Gets or sets the IsEnabled property.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectItem.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Input.C1MultiSelectItem"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectItem.#ctor(C1.DataCollection.IDataCollection{System.Object},System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:C1.WPF.Input.C1MultiSelectItem"/> class.
            </summary>
            <param name="collection">The collection containing the item.</param>
            <param name="dataIndex">Index of the data inside the collection.</param>
        </member>
        <member name="F:C1.WPF.Input.C1MultiSelectItem.Owner">
            <summary>
            Owner of this item. Needed for action directly on C1MultiSelectItem like set item.IsSelected.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectItem.SetField``1(``0@,``0,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.C1MultiSelectGroupItem">
            <summary>
            Grouped C1MultiSelectItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectGroupItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1MultiSelectGroupItem"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MultiSelectGroupItem.#ctor(C1.DataCollection.IDataCollectionGroup{System.Object,System.Object},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1MultiSelectGroupItem"/> class.
            </summary>
            <param name="group">The group item.</param>
            <param name="dataIndex">The index of the group inside the collection of groups.</param>
        </member>
        <member name="P:C1.WPF.Input.C1MultiSelectGroupItem.GroupText">
            <summary>
            Gets the a string representing the group item.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.MultiSelectItemsCollection">
            <summary>
            The collection of C1MultiSelectItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectItemsCollection.#ctor(C1.WPF.Input.C1MultiSelect)">
            <summary>
            Default constructor
            </summary>
            <param name="multiSelect"></param>
        </member>
        <member name="P:C1.WPF.Input.MultiSelectItemsCollection.DataCollection">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectItemsCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectItemsCollection.Add(System.Object)">
            <summary>
            Add data object directly
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectItemsCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.MultiSelectBoundItemsDataCollecction">
            <summary>
            The collection that contains cachable <see cref="T:C1.WPF.Input.C1MultiSelectItem"/>
            </summary>
        </member>
        <member name="T:C1.WPF.Input.MultiSelectBoundItemsDataCollecction.MultiSelectBoundItemsSelectDataCollection">
            <summary>
            Transforms the data item in collection into collection of C1MultiSelectItem
            </summary>
        </member>
        <member name="P:C1.WPF.Input.MultiSelectBoundItemsDataCollecction.MultiSelectBoundItemsSelectDataCollection.Parent">
            <summary>
            The parent C1MultiSelectGroupItem that contains this collection of C1MultiSelectItem
            </summary>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectBoundItemsDataCollecction.#ctor(C1.DataCollection.IDataCollection{System.Object},C1.WPF.Input.C1MultiSelectGroupItem,C1.WPF.Input.C1MultiSelect)">
            <summary>
            Default constructor
            </summary>
            <param name="source"></param>
            <param name="parent"></param>
            <param name="owner"></param>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectBoundItemsDataCollecction.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.MultiSelectGroupedItemsDataCollection">
            <summary>
            The collection that contains grouped C1MultiSelectItem and their children.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.MultiSelectGroupedItemsDataCollection.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.SuggestMode">
            <summary>
            Defines how to filter the items of MultiSelect.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SuggestMode.StartWith">
            <summary>
            Select the item which start with the input text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SuggestMode.Contains">
            <summary>
            List the items which contains the input text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SuggestMode.None">
            <summary>
            Don't filter the items.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.PopupUtil">
            <summary>
            Utility methods for popups.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor)">
            <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement.</param>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,System.Windows.Point)">
            <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> in a specified absolute point.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="point">The popup position.</param>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Windows.Point,System.Double,System.Double,System.Windows.FlowDirection)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <param name="flowDir">The FlowDirection used for the calculations.</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.GetPosition(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            return a absolute position according to the relative position of element
            </summary>
            <param name="element">the given element</param>
            <param name="point">the given relative position</param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.WPF.Input.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Windows.FrameworkElement,C1.WPF.Input.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.WPF.Input.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="T:C1.WPF.Input.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.ItemsSelected">
            <summary>
              Looks up a localized string similar to {0} items selected.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.SelectAFile">
            <summary>
              Looks up a localized string similar to Select a File.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.SelectAllCaption">
            <summary>
              Looks up a localized string similar to Select All.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.Separator_ArgumentException">
            <summary>
              Looks up a localized string similar to Cannot set value to an empty string!.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.Resources.Resources.UnSelectAllCaption">
            <summary>
              Looks up a localized string similar to UnSelect All.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.TextEditedEventArgs">
            <summary>
            AutoComplete event details.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.LastKey">
            <summary>
            Gets or sets the last key.
            </summary>
            <value>The last key.</value>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.CurrentText">
            <summary>
            Current text.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.CurrentSelectionStart">
            <summary>
            Current selection start.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.NewText">
            <summary>
            Text that will be put in the control after the AutoComplete.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.NewSelectionStart">
            <summary>
            Index where the selection will start after the AutoComplete.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextEditedEventArgs.Cancel">
            <summary>
            Cancel the input of the new text.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.Anchor">
            <summary>
            Specifies an anchor point in a visual element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Anchor.TopLeft">
            <summary>
            The top left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Anchor.TopRight">
            <summary>
            The top right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Anchor.BottomLeft">
            <summary>
            The bottom left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Anchor.BottomRight">
            <summary>
            The bottom right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.Anchor.Center">
            <summary>
            The center of the visual element.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.AnchorMatching">
            <summary>
            Specifies an anchor matching between two elements.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.AnchorMatching.FixedElementAnchor">
            <summary>
            Anchor of the fixed element.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.AnchorMatching.MoveableElementAnchor">
            <summary>
            Anchor of the element that will be located.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1AutoCompleteTextBox">
            <summary>
            Represents a control that can be used to display and edit plain text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1AutoCompleteTextBox._delay">
            <summary>
             Gets or sets the delay that occurs between the key strokes and the text changed event.
            </summary>
            <remarks>
            Setting this delay to something bigger than zero allows skipping unnecessary events when the text box is used in filtering scenarios.
            </remarks>
        </member>
        <member name="P:C1.WPF.Input.C1AutoCompleteTextBox.AutoCompleteText">
            <summary>
            Gets the auto-completed text.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1AutoCompleteTextBox.AutoComplete">
            <summary>
            Gets or sets the callback used to provide the auto-completion text.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1AutoCompleteTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1AutoCompleteTextBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1AutoCompleteTextBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1AutoCompleteTextBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1AutoCompleteTextBox.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1AutoCompleteTextBox.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1AutoCompleteTextBox.Delay">
            <summary>
             Gets or sets the delay that occurs between the key strokes and the text changed event.
            </summary>
            <remarks>
                Setting this delay to something bigger than zero allows skipping unnecessary events when the text box is used in filtering scenarios.
                </remarks>
        </member>
        <member name="T:C1.WPF.Input.TextBoxAutoCompleteEventArgs">
            <summary>
            Contains information about the <see cref="E:C1.WPF.Input.C1AutoCompleteTextBox.AutoComplete"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TextBoxAutoCompleteEventArgs.Text">
            <summary>
            Gets or sets the text that is being auto-completed.
            </summary>
            <remarks>
            Use this property to correct the capitalization of the entered text.
            </remarks>
        </member>
        <member name="P:C1.WPF.Input.TextBoxAutoCompleteEventArgs.AutoComplete">
            <summary>
            Gets or sets the text used to auto-complete.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1MaskedTextBox">
            <summary>
            Represents a control that uses a mask to prevent users from entering invalid data.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.Culture">
            <summary>
            Gets or sets the culture used to display the value in the <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.CultureProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Culture"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox._value">
            <summary>
            Gets or sets the formatted content of the control as specified by the <see cref="P:C1.WPF.Input.C1MaskedTextBox.TextMaskFormat" /> property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox._mask">
            <summary>
            Gets or sets the input mask.
            </summary>
            <remarks><para>The mask consists of a string that determines what class of character is acceptable at each input position.</para>
            <para>Valid mask characters are:</para>
            <para><b>0</b> Digit (0-9)</para>
            <para><b>9</b> Digit or space</para>
            <para><b>#</b> Digit, space, or sign (+/-)</para>
            <para><b>L</b> Letter</para>
            <para><b>?</b> Letter or space</para>
            <para><b>A</b> Letter or digit</para>
            <para><b>a</b> Letter, digit, or space</para>
            <para><b>&amp;</b>Any character</para>
            <para><b>.</b> Localized decimal symbol</para>
            <para><b>,</b> Localized thousand separator</para>
            <para><b>:</b> Localized time separator</para>
            <para><b>/</b> Localized date separator</para>
            <para>Other characters are treated as literals.They are displayed in the control but cannotbe edited.</para>
            <para>For example, the mask "000-0000" causes the control to accept only digits at every position except the third, which always contains a dash.</para>
            </remarks>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox._promptChar">
            <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox._textMaskFormat">
            <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Value" /> property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox._replaceMode">
            <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
            <remarks>Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.</remarks>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.IsValid">
            <summary>
            Gets a value that determines whether the control contains a valid entry.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1MaskedTextBox.MaskedTextChanged">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <remarks>
            Just after the Text property has beed changed via user input or code, 
            the <see cref="T:C1.WPF.Input.C1MaskedTextBox"/> updates the text again in order to make it consistent with
            the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Mask"/>. As a result, the TextChanged event can be triggered twice on each user
            input. In contrast to this, the <see cref="E:C1.WPF.Input.C1MaskedTextBox.MaskedTextChanged"/> is triggered only when Text is
            updated with a value that conforms to the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Mask"/>.
            </remarks>
        </member>
        <member name="M:C1.WPF.Input.C1MaskedTextBox.UpdateValue">
            <summary>
            Forces <see cref="T:C1.WPF.Input.C1MaskedTextBox"/> to update its <see cref="P:C1.WPF.Input.C1MaskedTextBox.Value"/> and Text properties when the control is not loaded. 
            Does nothing in WPF.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1MaskedTextBox.ValueChanged">
            <summary>
            Occurs when <see cref="P:C1.WPF.Input.C1MaskedTextBox.Value"/> changed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MaskedTextBox.OnMaskedTextChanged(C1.WPF.Input.MaskedTextChangedEventArgs)">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <see cref="E:MaskedTextChanged"/>
        </member>
        <member name="M:C1.WPF.Input.C1MaskedTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1MaskedTextBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1MaskedTextBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1MaskedTextBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.Value">
            <summary>
            Gets or sets the formatted content of the control as specified by the <see cref="!:TextMaskFormat" /> property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.MaskProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.Mask"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.Mask">
            <summary>
            Gets or sets the input mask.
            </summary>
            <remarks><para>The mask consists of a string that determines what class of character is acceptable at each input position.</para><para>Valid mask characters are:</para><para>
              <b>0</b> Digit (0-9)</para><para>
              <b>9</b> Digit or space</para><para>
              <b>#</b> Digit, space, or sign (+/-)</para><para>
              <b>L</b> Letter</para><para>
              <b>?</b> Letter or space</para><para>
              <b>A</b> Letter or digit</para><para>
              <b>a</b> Letter, digit, or space</para><para>
              <b>&amp;</b>Any character</para><para>
              <b>.</b> Localized decimal symbol</para><para>
              <b>,</b> Localized thousand separator</para><para>
              <b>:</b> Localized time separator</para><para>
              <b>/</b> Localized date separator</para><para>Other characters are treated as literals.They are displayed in the control but cannotbe edited.</para><para>For example, the mask "000-0000" causes the control to accept only digits at every position except the third, which always contains a dash.</para></remarks>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.PromptCharProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.PromptChar"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.PromptChar">
            <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.TextMaskFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.TextMaskFormat"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.TextMaskFormat">
            <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="!:Value" /> property.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1MaskedTextBox.ReplaceModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1MaskedTextBox.ReplaceMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1MaskedTextBox.ReplaceMode">
            <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
            <remarks>Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.</remarks>
        </member>
        <member name="T:C1.WPF.Input.MaskedTextChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.WPF.Input.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="T:C1.WPF.Input.C1NumericBox">
            <summary>
            The C1NumericBox control is a numeric editor that allows you to display and edit numeric values in many formats.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Text">
            <summary>
            Gets the text shown in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Text"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._format">
            <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
            <remarks>The property accepts any standard or custom numeric format supported by the String.Format method.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._maximum">
            <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._minimum">
            <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._increment">
            <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._value">
            <summary>
            Gets or sets the numeric value in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
            <remarks>Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="P:C1.WPF.Input.C1NumericBox.AllowNull" /> property.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._showButtons">
            <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._isReadOnly">
            <summary>
            Gets or sets the value that determines if the <see cref="T:C1.WPF.Input.C1NumericBox" /> is read-only.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._textAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._selectionStart">
            <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._selectionLength">
            <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._allowNull">
            <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
            <remarks>Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._delay">
            <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._interval">
            <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._handleUpDownKeys">
            <summary>
            Gets or sets if the control handles the Up / Down / PageUp / PageDown keys.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._rangeValidationMode">
            <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._selectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>The default value is OnDefaultSelection.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._increaseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the increase button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._decreaseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the decrease button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._decreaseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the decrease button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._increaseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the increase button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._increaseButtonStyle">
            <summary>
            Gets or sets the style of the button that increases the value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._decreaseButtonStyle">
            <summary>
            Gets or sets the style of the button that decreases the value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox._caretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Culture">
            <summary>
            The Culture property is obsolete, use the FrameworkElement.Language property instead.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.CultureProperty">
            <summary>
            The Culture property is obsolete, use the FrameworkElement.Language property instead.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1NumericBox.ValueChanged">
            <summary>
            Fires when the <see cref="P:C1.WPF.Input.C1NumericBox.Value"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnValueChanged(C1.WPF.Core.PropertyChangedEventArgs{System.Double})">
            <summary>
            Raises the <see cref="E:C1.WPF.Input.C1NumericBox.ValueChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects the text specified by start and length.
            </summary>
            <param name="start">Start of the selection.</param>
            <param name="length">Length of the selection.</param>
        </member>
        <member name="E:C1.WPF.Input.C1NumericBox.SelectionChanged">
            <summary>
            Occurs when the text selection in the <see cref="T:C1.WPF.Input.C1NumericBox"/> control changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnSelectionChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.WPF.Input.C1NumericBox.SelectionChanged"/> event.
            </summary>
            <param name="e">Contains the event data for the <see cref="E:C1.WPF.Input.C1NumericBox.SelectionChanged"/> event.</param>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.ConvertToInvariantNumber(System.String)">
            <summary>
            Translates culture specific digit chars (i.e. non '0'-'9') to standard chars in the specified
            string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1NumericBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.FormatProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Format"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Format">
            <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
            <remarks>The property accepts any standard or custom numeric format supported by the String.Format method.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Maximum">
            <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Minimum">
            <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IncrementProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Increment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Increment">
            <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Value">
            <summary>
            Gets or sets the numeric value in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
            <remarks>Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="!:AllowNull" /> property.</remarks>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.OnValueChanged(System.Double,System.Double)">
            Value property setter
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.ShowButtonsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.ShowButtons"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.ShowButtons">
            <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.IsReadOnly"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.IsReadOnly">
            <summary>
            Gets or sets the value that determines if the <see cref="T:C1.WPF.Input.C1NumericBox" /> is read-only.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.TextAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.SelectionStartProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.SelectionStart"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.SelectionStart">
            <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.SelectionLengthProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.SelectionLength"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.SelectionLength">
            <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.WPF.Input.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.AllowNullProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.AllowNull"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.AllowNull">
            <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
            <remarks>Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Delay">
            <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Interval">
            <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.HandleUpDownKeysProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.HandleUpDownKeys"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.HandleUpDownKeys">
            <summary>
            Gets or sets if the control handles the Up / Down / PageUp / PageDown keys.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.RangeValidationModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.RangeValidationMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.RangeValidationMode">
            <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>The default value is OnDefaultSelection.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IncreaseIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.IncreaseIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.IncreaseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the increase button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.DecreaseIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.DecreaseIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.DecreaseIconTemplate">
            <summary>
            Gets or sets the template of the icon used in the decrease button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.DecreaseIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.DecreaseIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.DecreaseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the decrease button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IncreaseIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.IncreaseIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.IncreaseIconStyle">
            <summary>
            Gets or sets the style of the icon shown in the increase button.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.IncreaseButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.IncreaseButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.IncreaseButtonStyle">
            <summary>
            Gets or sets the style of the button that increases the value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.DecreaseButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.DecreaseButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.DecreaseButtonStyle">
            <summary>
            Gets or sets the style of the button that decreases the value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1NumericBox.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1NumericBox.CaretBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1NumericBox.CaretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
            <summary>
            Updates the current visual state of the ButtonsVisibility visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.RangeValidationMode">
            <summary>
            Mode of validation of the range between Maximum and Minimum of <see cref="T:C1.WPF.Input.C1NumericBox"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeValidationMode.Always">
            <summary>
            This mode doesn't allow entering out of range values.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeValidationMode.AlwaysTruncate">
            <summary>
            This mode doesn't allow entering out of range values.
            The value will be truncated if the limits are exceeded.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeValidationMode.OnLostFocus">
            <summary>
            The value will be truncated on lost focus.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1Popup">
            <summary>
            Popup that displays a <see cref="P:C1.WPF.Input.C1Popup.Child"/> element relatively to <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._child">
            <summary>
            Gets or sets the element that will located in the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._placementTarget">
            <summary>
            Gets or sets the element that will determine the position of <see cref="P:C1.WPF.Input.C1Popup.Child"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._autoClose">
            <summary>
            Gets or sets whether the popup will close automatically when tapping outside the popup.
            </summary>
            <remarks>See <see cref="P:C1.WPF.Input.C1Popup.CloseOnLostFocus"/> and <see cref="P:C1.WPF.Input.C1Popup.CloseOnWindowChanged"/> for more options.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._closeOnLostFocus">
            <summary>
            Gets or sets whether the popup closes automatically when the focus is out of <see cref="P:C1.WPF.Input.C1Popup.Child"/> or <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._closeOnWindowChanged">
            <summary>
            Gets or sets whether the popup is closed when the window position or size changed or it is deactivated.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._closeOnPlacementTargetPositionChanged">
            <summary>
            Gets or sets whether the popup is closed when the position or size of the <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/> changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._checkBorders">
            <summary>
            Gets or sets whether the positioning algorithm will check for the borders of the window.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._ignoreFlowDirection">
            <summary>
            Gets or sets whether the <see cref="P:FlowDirection"/> will be taken into account.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._getLocations">
            <summary>
            Gets or sets a function that the positioning algorithm will use to determine the location of <see cref="P:C1.WPF.Input.C1Popup.Child"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._getReferencePosition">
            <summary>
            Gets or sets a reference point that the positioning algorithm will use to determine the location of <see cref="P:C1.WPF.Input.C1Popup.Child"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._overlapHorizontal">
            <summary>
            Gets or sets the horizontal overlap of the <see cref="P:C1.WPF.Input.C1Popup.Child"/> with respect of <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup._overlapVertical">
            <summary>
            Gets or sets the vertical overlap of the <see cref="P:C1.WPF.Input.C1Popup.Child"/> with respect of <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.OnOpened(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1Popup"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.C1Popup"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1Popup.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.ChildProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.Child"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.Child">
            <summary>
            Gets or sets the element that will located in the popup.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.PlacementTarget"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.PlacementTarget">
            <summary>
            Gets or sets the element that will determine the position of <see cref="!:Child" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.AutoCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.AutoClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.AutoClose">
            <summary>
            Gets or sets whether the popup will close automatically when tapping outside the popup.
            </summary>
            <remarks>See <see cref="!:CloseOnLostFocus" /> and <see cref="!:CloseOnWindowChanged" /> for more options.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.CloseOnLostFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.CloseOnLostFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.CloseOnLostFocus">
            <summary>
            Gets or sets whether the popup closes automatically when the focus is out of <see cref="!:Child" /> or <see cref="!:PlacementTarget" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.CloseOnWindowChangedProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.CloseOnWindowChanged"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.CloseOnWindowChanged">
            <summary>
            Gets or sets whether the popup is closed when the window position or size changed or it is deactivated.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.CloseOnPlacementTargetPositionChangedProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.CloseOnPlacementTargetPositionChanged"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.CloseOnPlacementTargetPositionChanged">
            <summary>
            Gets or sets whether the popup is closed when the position or size of the <see cref="!:PlacementTarget" /> changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.CheckBordersProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.CheckBorders"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.CheckBorders">
            <summary>
            Gets or sets whether the positioning algorithm will check for the borders of the window.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.IgnoreFlowDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.IgnoreFlowDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.IgnoreFlowDirection">
            <summary>
            Gets or sets whether the <see cref="P:FlowDirection" /> will be taken into account.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.GetLocationsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.GetLocations"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.GetLocations">
            <summary>
            Gets or sets a function that the positioning algorithm will use to determine the location of <see cref="!:Child" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.GetReferencePositionProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.GetReferencePosition"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.GetReferencePosition">
            <summary>
            Gets or sets a reference point that the positioning algorithm will use to determine the location of <see cref="!:Child" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.OverlapHorizontalProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.OverlapHorizontal"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.OverlapHorizontal">
            <summary>
            Gets or sets the horizontal overlap of the <see cref="!:Child" /> with respect of <see cref="!:PlacementTarget" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Popup.OverlapVerticalProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Popup.OverlapVertical"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Popup.OverlapVertical">
            <summary>
            Gets or sets the vertical overlap of the <see cref="!:Child" /> with respect of <see cref="!:PlacementTarget" />.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1PopupBorder">
            <summary>
            Border used to display the popup content inside.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1PopupBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1PopupBorder"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1PopupBorder.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1PopupBorder.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.WPF.Input.C1RangeSlider">
            <summary>
            The C1RangeSlider control enables the end-user to select two values from a range by moving two Thumb controls along a track.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._lowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._upperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._valueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._delay">
            <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._interval">
            <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._orientation">
            <summary>
            The Orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._smallValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._trackVisibility">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._scrollBehavior">
            <summary>
            Gets or sets how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._lowerThumbStyle">
            <summary>
            Gets or sets the style of the thumb that changes the lower value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._upperThumbStyle">
            <summary>
            Gets or sets the style of the thumb that changes the upper value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._trackStyle">
            <summary>
            Gets or sets the style of the track element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._valueTrackStyle">
            <summary>
            Gets or sets the style of the track element between LowerThumb and UpperThumb.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.LowerThumbDesiredSize">
            <summary>
            Returns the desired size of the lower thumb.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.UpperThumbDesiredSize">
            <summary>
            Returns the desired size of the upper thumb.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1RangeSlider.UpperValueChanged">
            <summary>
            Fires when the <see cref="P:C1.WPF.Input.C1RangeSlider.UpperValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1RangeSlider.UpperValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1RangeSlider.LowerValueChanged">
            <summary>
            Fires when the <see cref="P:C1.WPF.Input.C1RangeSlider.LowerValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1RangeSlider.LowerValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1RangeSlider.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1RangeSlider.ValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.UpdateTrackLayout">
            <summary> 
            This method will take the current min, max, and value to 
            calculate and layout the current control measurements.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.PixelsToUnits(System.Double)">
            <summary>
            Converts pixels to its corresponding unit value in the range slider
            </summary>
            <param name="pixels"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1RangeSlider"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.C1RangeSlider"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.LowerValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.LowerValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.UpperValueProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.UpperValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.ValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.ValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.ValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.Delay">
            <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.Interval">
            <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.Orientation">
            <summary>
            The Orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.SmallValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.SmallValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.SmallValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.TrackVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.TrackVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.TrackVisibility">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.ScrollBehaviorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.ScrollBehavior"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.ScrollBehavior">
            <summary>
            Gets or sets how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.LowerThumbStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.LowerThumbStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.LowerThumbStyle">
            <summary>
            Gets or sets the style of the thumb that changes the lower value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.UpperThumbStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.UpperThumbStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.UpperThumbStyle">
            <summary>
            Gets or sets the style of the thumb that changes the upper value.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.TrackStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.TrackStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.TrackStyle">
            <summary>
            Gets or sets the style of the track element.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.ValueTrackStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.ValueTrackStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.ValueTrackStyle">
            <summary>
            Gets or sets the style of the track element between LowerThumb and UpperThumb.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1RangeSlider.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1RangeSlider.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1RangeSlider.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.RangeSliderThumb">
            <summary>
            <see cref="T:System.Windows.Controls.Primitives.Thumb"/> used inside <see cref="T:C1.WPF.Input.C1RangeSlider"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeSliderThumb._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Input.RangeSliderThumb.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.RangeSliderThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.RangeSliderThumb"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.RangeSliderThumb.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.RangeSliderThumb"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.RangeSliderThumb.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.RangeSliderThumb.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.RangeSliderThumb.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.RangeSliderThumb.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.RangeSliderThumb.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.RangeSliderThumb.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.RangeSliderThumb.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:System.Windows.CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1Tag">
            <summary>
            Visual element used inside a <see cref="T:C1.WPF.Input.C1TagEditor"/>.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.UpdateVisualState">
            <summary>
            Update the visual state of this control
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.IsDeletingText">
            <summary>
            Check reason of TextChange event is come from delete or add new
            </summary>
            <returns></returns>
        </member>
        <member name="F:C1.WPF.Input.C1Tag._isInEditMode">
            <summary>
            Gets or sets a value indicates whether the control enters in edit mode or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag._isEditable">
            <summary>
            Gets or sets a value that enables or disables editing of the text in text box of the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag._isTagEditable">
            <summary>
            Gets or sets a value that determines whether the tag is editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag._closeIconTemplate">
            <summary>
            Gets or sets the template of the close icon.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag._closeIconStyle">
            <summary>
            Gets or sets the style applied to the close icon.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1Tag.ContentUpdating">
            <summary>
            Occurs before a tag's content is updating.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.OnContentUpdating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs before a tag end edit.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1Tag.RemoveButtonClicked">
            <summary>
            Occurs when remove button is clicked.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.OnRemoveButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when remove button is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.WPF.Input.C1Tag.TagEditedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.WPF.Input.C1Tag.TagEdited"/> event.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="E:C1.WPF.Input.C1Tag.TagEdited">
            <summary>
            Occurs when a tag is edited.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.OnTagEdited(System.Object,C1.WPF.Input.TagEditedEventArgs)">
            <summary>
            Occurs when a tag is edited.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1Tag"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1Tag.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1Tag.IsInEditModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Tag.IsInEditMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Tag.IsInEditMode">
            <summary>
            Gets or sets a value indicates whether the control enters in edit mode or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Tag.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Tag.IsEditable">
            <summary>
            Gets or sets a value that enables or disables editing of the text in text box of the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag.IsTagEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Tag.IsTagEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Tag.IsTagEditable">
            <summary>
            Gets or sets a value that determines whether the tag is editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag.CloseIconTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Tag.CloseIconTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Tag.CloseIconTemplate">
            <summary>
            Gets or sets the template of the close icon.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1Tag.CloseIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1Tag.CloseIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1Tag.CloseIconStyle">
            <summary>
            Gets or sets the style applied to the close icon.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1TagEditor">
            <summary>
            A text box-based control with ability to display and edit tags.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._focusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._text">
            <summary>
            Gets the text shown on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._separator">
            <summary>
            Gets or sets string which is used as separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._displayMode">
            <summary>
            Gets or sets a value indicates whether to show tag mode or text mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._tagStyle">
            <summary>
            Gets or sets the style used for the tags.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._tagWrapping">
            <summary>
            Gets or sets a value indicates whether to wrap the tags or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._isEditable">
            <summary>
            Gets or sets a value that enables or disables editing of the text in text box of the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._isTagEditable">
            <summary>
            Gets or sets a value that determines whether the tag is editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._maxSelectedItems">
            <summary>
            Gets or sets the maximum number of items to selected on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._isTextReadOnly">
            <summary>
            Gets or sets a value that determines whether the content of the input element should be enable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.InsertTag(System.String,System.Object)">
            <summary>
            Insert a tag at last.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.InsertTag(System.Int32,System.String,System.Object)">
            <summary>
            Insert a tag in a specific position.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.InsertNewTextTag(System.Int32,System.String,System.Object)">
            <summary>
            Insert new tag in a specific position.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.RemoveTagAt(System.Int32)">
            <summary>
            Remove a tag in a specific position.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.RemoveTag(C1.WPF.Input.C1Tag)">
            <summary>
            Remove a specific tag.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.ClearTags">
            <summary>
            Clear all tags.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.UpdateTextFromTags">
            <summary>
            Update Text according to the tags when DisplayMode is Text.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.ContainsTag(System.String)">
            <summary>
            Determines whether specified text already exists in tags collection.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to search for.</param>
            <returns>Return true if such tag already exists; False otherwise.</returns>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.SetEditorText(System.String)">
            <summary>
            Set the text of the inner editor.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.GetEditorText">
            <summary>
            Get the text of the inner editor.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.IsDeletingText">
            <summary>
            Check reason of TextChange event is come from delete or add new
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.UpdateTextReadOnlyStatus">
            <summary>
            Update IsReadOnly status of text input
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.UpdateTextVisibleStatus">
            <summary>
            Hidden text editor in Tag DisplayMode and number Tags count > 0 to unfire event to text editor
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.Tags">
            <summary>
            Gets the string collection of tags.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.TagsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.Tags"/> dependency property. 
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1TagEditor.TagEditorEditingEventHandler">
            <summary>
            Occurs when a tag is being edited.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.Editing">
            <summary>
            Occurs when tag is being edited.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnEditing(System.Object,C1.WPF.Input.TagEditorEditingEventArgs)">
            <summary>
            Occurs when tag is being edited.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagInserted">
            <summary>
            Occurs when a tag is inserted.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagInserted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when a tag is inserted.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagUpdating">
            <summary>
            Occurs before a tag is edited.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagUpdating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs before a tag is edited.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagInserting">
            <summary>
            Occurs before a tag is inserted.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagInserting(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs before a tag is inserted.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagRemoved">
            <summary>
            Occurs when a tag is removed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagRemoved(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when a tag is removed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagExited">
            <summary>
            Occurs when a tag is exit edit mode.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagExited(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when a tag is edited.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.WPF.Input.C1TagEditor.TagsReset">
            <summary>
            Occurs when tags are resetted.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnTagsReset(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when tags are resetted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1TagEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.Text"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.Text">
            <summary>
            Gets the text shown on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.SeparatorProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.Separator"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.Separator">
            <summary>
            Gets or sets string which is used as separator in multi-select mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.DisplayModeProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.DisplayMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.DisplayMode">
            <summary>
            Gets or sets a value indicates whether to show tag mode or text mode.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.TagStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.TagStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.TagStyle">
            <summary>
            Gets or sets the style used for the tags.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.TagWrappingProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.TagWrapping"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.TagWrapping">
            <summary>
            Gets or sets a value indicates whether to wrap the tags or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.IsEditable">
            <summary>
            Gets or sets a value that enables or disables editing of the text in text box of the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.IsTagEditableProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.IsTagEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.IsTagEditable">
            <summary>
            Gets or sets a value that determines whether the tag is editable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.MaxSelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.MaxSelectedItems"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.MaxSelectedItems">
            <summary>
            Gets or sets the maximum number of items to selected on the control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.IsTextReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.IsTextReadOnly"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.IsTextReadOnly">
            <summary>
            Gets or sets a value that determines whether the content of the input element should be enable or not.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TagEditor.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TagEditor.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TagEditor.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TagEditor.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1TextBox">
            <summary>
            Represents a control that can be used to display and edit plain text,
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBox._focusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBox.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1TextBox"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TextBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1TextBox.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBox.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBox.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1TextBoxBase">
            <summary> 
            Base class for all ComponentOne text box controls.
            </summary>
            <remarks>
            Adds <see cref="P:C1.WPF.Input.C1TextBoxBase.Placeholder" /> and <see cref="!:IsEnabled" /> properties, 
            as well as styles for mouse over and focus.
            </remarks>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._focusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Input.C1TextBoxBase.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._selectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>The default value is OnDefaultSelection.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._mouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._focusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase._validationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextBoxBase.KeyDown">
            <summary>
            Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement"/> has focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.C1TextProperty">
            <summary>
            Identifies the C1Text dependency property.
            </summary>
            <remarks>
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </remarks>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.C1Text">
            <summary>
            Get or set the C1Text property.
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1TextBoxBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.IsPlaceholderVisible">
            <summary>
            Gets a value indicating whether the placeholder is visible.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnTextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called immediately after the Text property changes.
            </summary>
            <param name="e">Provides data about the change.</param>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.UpdatePlaceholderVisibility">
            <summary>
            Derived classes can call this method when the <see cref="P:IsPlacehoderVisible"/> state is changed from their point of view.
            This method forces the IsPlacehoderVisible state to be updated without clearing the Text property.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1TextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.Finalize">
            <summary>
            Finalizes this instance of the <see cref="T:C1.WPF.Input.C1TextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.PlaceholderProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.Placeholder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.Placeholder">
            <summary>
            Gets or sets the placeholder text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:System.Windows.CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>The default value is OnDefaultSelection.</remarks>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.MouseOverBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.MouseOverBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.MouseOverBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the border of the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1TextBoxBase.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1TextBoxBase.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1TextBoxBase.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.Input.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1TextBoxBase.ChangeVisualStatePlaceholder(System.Boolean)">
            <summary>
            Updates the current visual state of the Placeholder visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.SelectOnFocusCondition">
            <summary>
            Defines the possible conditions that cause selection of an entire control text when control receives focus.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SelectOnFocusCondition.Never">
            <summary>
            Never select a text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SelectOnFocusCondition.Always">
            <summary>
            Always select a text.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.SelectOnFocusCondition.OnDefaultSelection">
            <summary>
            Select text only if the both SelectionStart and SelectionLength properties are set to zero.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ToggleSwitch">
            <summary>
            Represents a switch that can be toggled between two states.
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ToggleSwitch.Toggled">
            <summary>
            Fires when the control's state is changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch._isOn">
            <summary>
            Gets or sets a value that declares whether the state of the ToggleSwitch is "On".
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch._accentBrush">
            <summary>
            Accent brush of the ToggleSwitch control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch._accentForeground">
            <summary>
            Accent foreground brush of the ToggleSwitch control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch._onContent">
            <summary>
            Gets or sets the content displayed when the state is On.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch._offContent">
            <summary>
            Gets or sets the content displayed when the state is Off.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.Toggle">
            <summary>
            Inverts the state of the ToggleSwitch control.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1ToggleSwitch"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.IsFocused">
            <summary>
            Gets whether the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch.IsOnProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ToggleSwitch.IsOn"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.IsOn">
            <summary>
            Gets or sets a value that declares whether the state of the ToggleSwitch is "On".
            </summary>
        </member>
        <member name="E:C1.WPF.Input.C1ToggleSwitch.IsOnChanged">
            <summary> 
            Event raised when the <see cref="P:C1.WPF.Input.C1ToggleSwitch.IsOn"/> property has changed.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch.AccentBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ToggleSwitch.AccentBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.AccentBrush">
            <summary>
            Accent brush of the ToggleSwitch control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch.AccentForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ToggleSwitch.AccentForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.AccentForeground">
            <summary>
            Accent foreground brush of the ToggleSwitch control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch.OnContentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ToggleSwitch.OnContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.OnContent">
            <summary>
            Gets or sets the content displayed when the state is On.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ToggleSwitch.OffContentProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ToggleSwitch.OffContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ToggleSwitch.OffContent">
            <summary>
            Gets or sets the content displayed when the state is Off.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ToggleSwitch.ChangeVisualStateToggle(System.Boolean)">
            <summary>
            Updates the current visual state of the Toggle visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.ValidationState">
            <summary>
            Enumerates binding validation states.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.ValidationState.Valid">
            <summary>
            All bindings are valid.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.ValidationState.InvalidFocused">
            <summary>
            A binding is invalid and the control is focused.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.ValidationState.InvalidUnfocused">
            <summary>
            A binding is invalid and the control is unfocused.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.C1ValidationDecorator">
            <summary>
            Displays binding validation errors.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ValidationDecorator._validationState">
            <summary>
            Gets or sets the <see cref="P:C1.WPF.Input.C1ValidationDecorator.ValidationState"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ValidationDecorator._target">
            <summary>
            Gets or sets the target of the validation.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ValidationDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.C1ValidationDecorator"/> class.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ValidationDecorator.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:C1.WPF.Input.C1ValidationDecorator.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.WPF.Input.C1ValidationDecorator.ValidationStateProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ValidationDecorator.ValidationState"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ValidationDecorator.ValidationState">
            <summary>
            Gets or sets the <see cref="T:C1.WPF.Input.ValidationState" />.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ValidationDecorator.TargetProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ValidationDecorator.Target"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.WPF.Input.C1ValidationDecorator.Target">
            <summary>
            Gets or sets the target of the validation.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.C1ValidationDecorator.ErrorsProperty">
            <summary>
            Identifies the <see cref="P:C1.WPF.Input.C1ValidationDecorator.Errors"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.WPF.Input.C1ValidationDecorator.ChangeVisualStateValidationState(System.Boolean)">
            <summary>
            Updates the current visual state of the ValidationState visual state group to match the object's properties.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.CompositeTextUtils">
            <summary>
            Provides utilities for processing a text where each glyph can be represented by multiple
            unicode chars. Such a text in the utility methods is represented by an array of strings,
            where each string represents a single glyph.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.InputResources">
            <summary>
            This class gives access to localized resources from xaml.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.InputResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Input.InputResources"/> class.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.RangeSliderScrollBehavior">
            <summary>
            Specifies how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeSliderScrollBehavior.None">
            <summary>
            Both thumbs will not move.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeSliderScrollBehavior.Thumb">
            <summary>
            Closest thumb will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.RangeSliderScrollBehavior.Range">
            <summary>
            Both thumbs will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.MaskFormat">
            <summary>
            Defines how to format the value inside of a <see cref="T:C1.WPF.Input.C1MaskedTextBox"/>.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.MaskFormat.IncludePrompt">
            <summary>
            Return text input by the user as well as any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.MaskFormat.IncludeLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.MaskFormat.IncludePromptAndLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask and any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.MaskFormat.ExcludePromptAndLiterals">
            <summary>
            Return only text input by the user.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.DisplayMode">
            <summary>
            Defines how to display text of control.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DisplayMode.Text">
            <summary>
            Display text with separator between each item.
            </summary>
        </member>
        <member name="F:C1.WPF.Input.DisplayMode.Tag">
            <summary>
            Display tags for each item.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.MaskedTextChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.WPF.Input.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:C1.WPF.Input.MaskedTextChangedEventArgs"/> class.
            </summary>
            <param name="newText">
            The new text.
            </param>
            <param name="oldText">
            The old text.
            </param>
        </member>
        <member name="P:C1.WPF.Input.MaskedTextChangedEventArgs.OldText">
            <summary>
            Gets an old text.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.MaskedTextChangedEventArgs.NewText">
            <summary>
            Gets a new text.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.TagEditedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.WPF.Input.C1Tag.TagEdited"/> event.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.TagEditedEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:C1.WPF.Input.TagEditedEventArgs"/> class.
            </summary>
            <param name="text">
            The current text.
            </param>
        </member>
        <member name="P:C1.WPF.Input.TagEditedEventArgs.Text">
            <summary>
            Gets the current text.
            </summary>
        </member>
        <member name="T:C1.WPF.Input.TagEditorEditingEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.WPF.Input.C1TagEditor.Editing"/> event.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.TagEditorEditingEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="text"></param>
            <param name="position"></param>
        </member>
        <member name="P:C1.WPF.Input.TagEditorEditingEventArgs.Position">
            <summary>
            Gets the position of the tag.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.TagEditorEditingEventArgs.Text">
            <summary>
            Gets the text of the tag.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.TokenizedMask.TranslateContextDependentLiteral(System.String)">
            <summary>
            If passed literal is not context dependent then returns the passed value.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:C1.WPF.Input.TokenizedMask.FindNextPrompt(System.Int32,System.Boolean)">
            <summary>
            offset = -1 means "before first"
            offset = Tokens.Count means "after last"
            </summary>
        </member>
        <member name="M:C1.WPF.Input.TokenizedMask.GetApplicableSymbolList(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a list of symbols where non applicable symbols are excessive trailing symbols are excluded.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.MaskToken.IsLiteral">
            <summary>
            Indicates whether the token represents a literal or a prompt symbol.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.MaskToken.OutputSymbol">
            <summary>
            Gets a symbol that as it's shown in the TextBox.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.MaskToken.OriginalSymbol">
            <summary>
            Gets an original mask symbol, as defined in the TextBox.Mask property.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.PromptToken.IsUppercase">
            <summary>
            true - force upper case
            false - force lower case
            null - show as is
            </summary>
        </member>
        <member name="P:C1.WPF.Input.PromptToken.Value">
            <summary>
            Gets or sets a user input for this prompt.
            </summary>
        </member>
        <member name="P:C1.WPF.Input.PromptToken.IsEmpty">
            <summary>
            Indicates whether an input is entered in the token.
            </summary>
        </member>
        <member name="M:C1.WPF.Input.PromptToken.ClearValue">
            <summary>
            Set the Value property to a default value.
            </summary>
        </member>
    </members>
</doc>
